{
  "hash": "2e74fbdb6ee292b61b8abf9d52288b98",
  "result": {
    "markdown": "---\ntitle: \"BCB 520 - FINAL PROJECT\"\nsubtitle: \"Let's get into RainFall Data in Puerto Rico\"\nformat:\n  html:\n    toc: false\n    echo: true\nauthor: \"Geraline Tross-Torres\"\ndate: \"2024-04-28\"\ncategories: [Portfolio, DataViz, Assignment]\nimage: \"RainFall.png\"\ndescription: \"How much Rainfall did Puerto Rico had in the last 15 years\"\ncode-fold: true\ncode-tools: true\n\n---\n\n\n## OVERVIEW\n\nThis assignment provides you the opportunity to synthesize all of the concepts we've covered in the course to date. The basic framework is that you will create a COMPLETE data visualization BLOG post that is suitable as a showcase component of your Data Science Portfolio. The point is to [SHOW]{.red} people your skills.\n\n## STRUCTURE\n\nThe basic formatting guidelines for this assignment are:\n\n1.  Include `code fold` or `code tools` options (or both) that allow users to view and copy your code while maintaining overall readability of your post.\n2.  Suppress all output and warnings that might distract from your visualizations and writing.\n3.  Properly title your assignment. The main title should be **\"BCB 520 - Final Project\"**, and the subtitle should be a descriptive title related to your question or topic.\n4.  Include author, date, categories, and a description in your YAML header.\n5.  Write clear, complete sentences for a target audience with some scientific background but little training in your specific discipline.\n6.  Include references if appropriate and use hyperlinks to external sources of data, inspiration, or examples.\n7.  Use the header hierarchy and create a sensible document outline with white space. Format for readability! Use **bold** and *italic* fonts to emphasize things! Use [color]{.red} by customizing your `.css` file!\n\n**In addition to the above formatting guidelines, your portfolio post must contain the following sections:**\n\n### Preamble\n\nWrite a brief paragraph describing the primary question or purpose of the post. Ideally, the concept should be challenging enough that it requires at least two visualizations that use different idioms (ie. don't just make two scatterplots with different variables). The concept should also be challenging enough that it captures the interest of the reader (i.e. a plot of height and weight that shows they are correlated is trivial and not appropriate). The best approach is to explore a topic or question in which YOU are very interested.\n\n### Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sf' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(tigris)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tigris' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nTo enable caching of data, set `options(tigris_use_cache = TRUE)`\nin your R script or .Rprofile.\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rnaturalearth' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearthdata)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rnaturalearthdata' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rnaturalearthdata'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:rnaturalearth':\n\n    countries110\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(rnaturalearthhires)\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'plotly' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(dplyr)\n```\n:::\n\n\nWrite a summary of the data sources you will use. Include a `Data Dictionary` table that fully describes each individual data file used. You may use your own research data or publicly available data from any source you like (with attribution). There aren't any minimum or maximum data set size requirements, other than you need something big enough to be interesting and not so big that we don't have a supercomputer capable of creating your visualization.\n\n**NEW REQUIREMENT: Your assignment must feature one of the two new data types we have considered since the midterm: NETWORK DATA or SPATIAL DATA.**\n\n### Visualizations\n\nCreate your visualizations and include text that explains any steps or design choices. Be sure to include clearly labeled axes and a concise but complete figure caption for each visualization. Make deliberate choices for color palettes, point marks, line types, etc. Demonstrate that you understand the concepts we have covered!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the spatial data for countries\ncountries <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Filter the dataset to extract Puerto Rico\npuerto_rico <- subset(countries, admin == \"Puerto Rico\")\n\n# Plot Puerto Rico's geometry\nggplot() +\n  geom_sf(data = puerto_rico) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](Final_Project_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'lubridate' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n✔ readr     2.1.5     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ plotly::filter() masks dplyr::filter(), stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n```{.r .cell-code}\nlibrary (plotly)\n\n# Read the data\nrainfallprwide <- read_excel('geraline_data_mm.xlsx')\n\nstations <- rainfallprwide %>%\n  select(STATION, LATITUDE, LONGITUDE, NAME)%>%\n  unique()\n\ng <- list(\n  scope = 'north america',\n  center = list(lat = 18.2208, lon = -66.5901),  # Centered on Puerto Rico\n  projection = list(type = 'mercator'),\n  showland = TRUE,\n  landcolor = \"rgb(220, 220, 220)\",  # Light gray\n  subunitcolor = \"rgb(200, 200, 200)\",  # Light gray\n  countrycolor = \"rgb(200, 200, 200)\",  # Light gray\n  countrywidth = 0.5,\n  subunitwidth = 0.5\n)\n\n plot_geo(stations, lat = ~LATITUDE, lon = ~LONGITUDE) %>%\n  add_markers(\n    text = ~NAME,\n    symbol = I(\"circle\"),\n    size = I(10),\n    hoverinfo = \"text\"\n  ) %>%\n  layout(\n    title = 'Rainfall in Puerto Rico Stations',\n    geo = g\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-37d616709f4f5080f2f5\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-37d616709f4f5080f2f5\">{\"x\":{\"visdat\":{\"566064fb3efd\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"566064fb3efd\",\"attrs\":{\"566064fb3efd\":{\"lat\":{},\"lon\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"markers\",\"text\":{},\"symbol\":[\"circle\"],\"size\":[10],\"hoverinfo\":\"text\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"mapType\":\"geo\",\"title\":\"Rainfall in Puerto Rico Stations\",\"geo\":{\"domain\":{\"x\":[0,1],\"y\":[0,1]},\"scope\":\"north america\",\"center\":{\"lat\":18.220800000000001,\"lon\":-66.590100000000007},\"projection\":{\"type\":\"mercator\"},\"showland\":true,\"landcolor\":\"rgb(220, 220, 220)\",\"subunitcolor\":\"rgb(200, 200, 200)\",\"countrycolor\":\"rgb(200, 200, 200)\",\"countrywidth\":0.5,\"subunitwidth\":0.5},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"lat\":[18.174700000000001,17.955500000000001,18.128,18.349399999999999,18.4724,18.084250000000001,18.336099999999998,17.9955,18.3963,17.979800000000001,18.465199999999999,18.0716,18.051300000000001,18.226400000000002,17.972200000000001,18.430779999999999,18.172499999999999,18.473600000000001,18.334399999999999,18.265000000000001,18.0258,18.242730000000002,18.43261,18.184159999999999,18.173100000000002,18.328299999999999],\"lon\":[-66.797700000000006,-66.222200000000001,-66.264099999999999,-66.752499999999998,-67.115499999999997,-66.654640000000001,-66.666600000000003,-66.957189999999997,-66.924400000000006,-66.126249999999999,-67.052499999999995,-66.142700000000005,-66.498599999999996,-65.9114,-67.046099999999996,-66.466080000000005,-66.987200000000001,-67.028800000000004,-66.407799999999995,-65.720799999999997,-66.525199999999998,-65.784970000000001,-66.010649999999998,-65.968620000000001,-66.492800000000003,-66.016300000000001],\"type\":\"scattergeo\",\"mode\":\"markers\",\"text\":[\"ADJUNTAS SUBSTATION, PR US\",\"AGUIRRE, PR US\",\"AIBONITO 1 S, PR US\",\"ARECIBO OBSERVATORY, PR US\",\"CALERO CAMP, PR US\",\"CORRAL VIEJO, PR US\",\"DOS BOCAS, PR US\",\"ENSENADA 1 W, PR US\",\"GUAJATACA DAM, PR US\",\"GUAYAMA 1 SW, PR US\",\"ISABELA SUBSTATION, PR US\",\"JAJOME ALTO, PR US\",\"JUANA DIAZ CAMP, PR US\",\"JUNCOS 1 SE, PR US\",\"MAGUEYES ISLAND, PR US\",\"MANATI 2 E, PR US\",\"MARICAO FISH HATCHERY, PR US\",\"MORA CAMP, PR US\",\"MOROVIS 1 N, PR US\",\"PARAISO, PR US\",\"PONCE 4 E, PR US\",\"RIO BLANCO LOWER, PR US\",\"SAN JUAN L M MARIN INTERNATIONAL AIRPORT, PR US\",\"SAN LORENZO 1 SW, PR US\",\"TORO NEGRO FOREST, PR US\",\"TRUJILLO ALTO 2 SSW, PR US\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"size\":[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\"sizemode\":\"area\",\"symbol\":\"circle\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"textfont\":{\"size\":10},\"line\":{\"color\":\"rgba(31,119,180,1)\",\"width\":10},\"geo\":\"geo\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'maps' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'maps'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:viridis':\n\n    unemp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    map\n```\n:::\n\n```{.r .cell-code}\n# Get the map data for Puerto Rico\nmap_data <- map_data(\"world\", region = \"Puerto Rico\")\n\n# Create the base map with ggplot2\nbase_map <- ggplot() +\n  geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = \"lightgray\", color = \"black\") +\n  coord_map() +\n  ggtitle(\"Map of Puerto Rico\")\n\n# Convert the base map to a Plotly object\nplotly_map <- ggplotly(base_map)\n\n# Assuming 'stations' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', and 'NAME'\n# Add station markers to the Plotly map\nplotly_map <- plotly_map %>%\n  add_markers(\n    data = stations,\n    x = ~LONGITUDE,\n    y = ~LATITUDE,\n    text = ~NAME,\n    marker = list(\n      symbol = \"circle\",  # Change the symbol to square\n      color = \"navy\",     # Change the color to blue\n      size = 10           # Change the size to 10\n    ),\n    hoverinfo = \"text\"\n  ) \n\n# Display the map\nprint(plotly_map)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n\n# Read the data\nrainfallprwide <- read_excel('geraline_data_mm.xlsx')\n\n# Create the stations data frame and filter for month 1\nstations_rain <- rainfallprwide %>%\n  filter(MONTH == 1) %>%\n  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, \"2009\") %>%\n  unique()\n\n# Convert the base map to a Plotly object\nplotly_map <- ggplotly(base_map)\n\n# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'\n# Add station markers to the Plotly map with size based on rainfall in 2009\nplotly_map <- plotly_map %>%\n  add_markers(\n    data = stations_rain,\n    x = ~LONGITUDE,\n    y = ~LATITUDE,\n    text = ~NAME,\n    marker = list(\n      symbol = \"circle\",       # Change the symbol to square\n      color = \"navy\",          # Change the color to blue\n      size = ~`2009`           # Size based on rainfall in 2009\n    ),\n    hoverinfo = \"text\"\n  ) \n\n# Display the map\nprint(plotly_map)\n\n#do the squareroot for the sizes for the circles for the rainfall\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Read the data\nrainfallprwide <- read_excel('geraline_data_mm.xlsx')\n\n# Extract years from column names\nyears <- as.character(2009:2023)\n\n# Convert the numeric columns to numeric type\nrainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in lapply(rainfallprwide[, -(1:5)], as.numeric): NAs introduced by\ncoercion\n```\n:::\n\n```{.r .cell-code}\n# Calculate total rainfall for each station for each year individually\nstation_year_total_rainfall <- rainfallprwide %>%\n  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%\n  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = \"Total_Rainfall_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'STATION', 'LATITUDE', 'LONGITUDE'. You can\noverride using the `.groups` argument.\n```\n:::\n:::\n\n\n### Conclusions or Summary\n\nAnswer your research question. Draw a conclusion or inference related to your topic. Summarize your results. What new questions have emerged as a result of your visualizations? What interesting next steps have emerged?\n\n## RUBRIC\n\nI will evaluate the following for your portfolio post:\n\n**1. Clarity of writing (15%):** Complete, clear sentences. Good Grammar. Understandable to target audience. Logical flow of ideas.\n\n**2. Adherence to format (10%):** Did you follow directions?\n\n**3. Topic suitability (15%):** Is the topic interesting? Are the visualizations challenging and interesting enough to showcase your skills?\n\n**4. Viz Execution (40%):** Are the visualizations effective? Do they adhere to the principles of effectiveness? Are choices for idiom, marks, channels, etc made deliberately and well justified?\n\n**5. Creativity (20%):** Did you push your boundaries and learn new techniques? Is the overall post compelling and interesting? Are the visualizations inspiring, creative, unique, and generally impressive? If I were recruiting a new data scientist (and I often am), would this portfolio post impress me, or would it damage your candidacy during review?\n",
    "supporting": [
      "Final_Project_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\r\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}