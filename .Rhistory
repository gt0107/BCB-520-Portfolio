# Colors
my_colors_3 <- c("BOISE STATE UNIVERSITY" = "orange", "IDAHO STATE UNIVERSITY" = "black", "UNIVERSITY OF IDAHO" = "gold")
# Plotting grant duration as a bar graph
library(ggplot2)
ggplot(combined_data_NIH, aes(x = OrganizationName, y = grant_duration_years, fill = OrganizationName)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Grant Duration by Organization") +
xlab("") +
ylab("Grant Duration (Years)") +
scale_fill_manual(values = my_colors_3) +  # Apply custom colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
axis.text.y = element_text(size = 12),  # Adjust size of y-axis labels
legend.text = element_text(size = 12),  # Adjust size of legend text
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
ggplot(combined_data_NIH, aes(x = OrganizationName, y = grant_duration_years, fill = OrganizationName)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Grant Duration by Organization") +
xlab("") +
ylab("Grant Duration (Years)") +
scale_fill_manual(values = my_colors_3) +  # Apply custom colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
axis.text.y = element_text(size = 12),  # Adjust size of y-axis labels
legend.text = element_text(size = 12),  # Adjust size of legend text
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
theme_minimal() +
# COMPARISON BETWEEEN NIH - Grant Duration
library(readxl)
# COMPARISON BETWEEEN NIH - Grant Duration
library(readxl)
NIH_Compare_Data <- read_xlsx("NIH_Combined_Data.xlsx")
# COMPARISON BETWEEEN NIH - Grant Duration
library(readxl)
NIH_Compare_Data <- read_xlsx("NIH_Combined_Data.xlsx")
library(dplyr)
# Filter the data for each institution
UI_NIH_data <- NIH_Compare_Data %>%
filter(OrganizationName == "UNIVERSITY OF IDAHO")
BSU_NIH_data <- NIH_Compare_Data %>%
filter(OrganizationName == "BOISE STATE UNIVERSITY")
ISU_NIH_data <- NIH_Compare_Data %>%
filter(OrganizationName == "IDAHO STATE UNIVERSITY")
# Calculate the duration of grants for each institution
# Convert "Start Date" and "End Date" columns to date objects
#UI
UI_NIH_data <- UI_NIH_data%>%
mutate(`Start Date` = as.Date(ProjectStartDate, format = "%m/%d/%Y"),
`End Date` = as.Date(ProjectEndDate, format = "%m/%d/%Y"))
# Assuming 'grant_duration' is in days
UI_NIH_data <- UI_NIH_data %>%
mutate(grant_duration = `End Date` - `Start Date`)
UI_NIH_data <- UI_NIH_data %>%
mutate(grant_duration_years = as.numeric(grant_duration) / 365.25)
# BSU - no quiere funcionar no tengo la menor idea pq
BSU_NIH_data  <- BSU_NIH_data %>%
mutate(`Start Date` = as.Date(ProjectStartDate, format = "%m/%d/%Y"),
`End Date` = as.Date(ProjectEndDate, format = "%m/%d/%Y"))
# Assuming 'grant_duration' is in days
BSU_NIH_data  <- BSU_NIH_data %>%
mutate(grant_duration = `End Date` - `Start Date`)
BSU_NIH_data  <- BSU_NIH_data  %>%
mutate(grant_duration_years = as.numeric(grant_duration) / 365.25)
# ISU
ISU_NIH_data<- ISU_NIH_data %>%
mutate(`Start Date` = as.Date(ProjectStartDate, format = "%m/%d/%Y"),
`End Date` = as.Date(ProjectEndDate, format = "%m/%d/%Y"))
# Assuming 'grant_duration' is in days
ISU_NIH_data <- ISU_NIH_data %>%
mutate(grant_duration = `End Date` - `Start Date`)
ISU_NIH_data <- ISU_NIH_data %>%
mutate(grant_duration_years = as.numeric(grant_duration) / 365.25)
# Visualization
library(dplyr)
# Assuming UI_data contains the grant duration information for one institution
# and other_datasets contain the grant duration information for the other institutions
# Combine datasets
combined_data_NIH <- bind_rows(UI_NIH_data, BSU_NIH_data, ISU_NIH_data)
# Colors
my_colors_3 <- c("BOISE STATE UNIVERSITY" = "orange", "IDAHO STATE UNIVERSITY" = "black", "UNIVERSITY OF IDAHO" = "gold")
# Plotting grant duration as a bar graph
library(ggplot2)
ggplot(combined_data_NIH, aes(x = OrganizationName, y = grant_duration_years) +
geom_bar(stat = "identity", position = "dodge", fill = c(my_colors_3[combined_data_NIH$OrganizationName]))+
ggtitle("Grant Duration by Organization") +
xlab("") +
ylab("Grant Duration (Years)") +
scale_fill_manual(values = my_colors_3) +  # Apply custom colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
axis.text.y = element_text(size = 12),  # Adjust size of y-axis labels
legend.text = element_text(size = 12),  # Adjust size of legend text
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
ggplot(combined_data_NIH, aes(x = OrganizationName, y = grant_duration_years, fill = OrganizationName)) +
geom_bar(stat = "identity", position = "dodge", fill = my_colors_3[combined_data_NIH$OrganizationName]) +
ggtitle("Grant Duration by Organization") +
xlab("") +
ylab("Grant Duration (Years)") +
scale_fill_manual(values = my_colors_3) +  # Apply custom colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
axis.text.y = element_text(size = 12),  # Adjust size of y-axis labels
legend.text = element_text(size = 12),  # Adjust size of legend text
plot.title = element_text(hjust = 0.5, size = 14))  # Adjust size of plot title
# COMPARISON BETWEEEN DOE - Grant Status
library(dplyr)
library(ggplot2)
# Calculate total grant action count for each institution
DOE_Grant_Action <- DOE_Compare_Data %>%
group_by(Institution, `Action Type`) %>%
summarise(count = n(), .groups = "drop") %>%
ungroup()
library(ggplot2)
# Assuming DOE_Grant_Action is your summarized data frame with counts of Action Type by Institution
ggplot(DOE_Grant_Action, aes(x = Institution, y = count, fill = `Action Type`)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Number of Counts of Action Type by Institution") +
xlab("") +
ylab("Number of Active Grants") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
axis.text.y = element_text(size = 12),  # Adjust size of y-axis labels
legend.text = element_text(size = 12),  # Adjust size of legend text
plot.title = element_text(hjust = 0.5, size = 14))
# COMPARISON BETWEEEN NSF - Grant Status
library(dplyr)
library(ggplot2)
# Calculate total grant action count for each institution
NSF_Grant_Award_Instrument <- NSF_Compare_Data %>%
group_by(Organization, AwardInstrument) %>%
summarise(count = n(), .groups = "drop") %>%
ungroup()
# Check unique levels of AwardInstrument
unique_levels <- unique(NSF_Grant_Award_Instrument$AwardInstrument)
# Adjust my_colors_4 to match the number of unique levels
my_colors_4 <- c("navyblue", "darkgreen", "darkorange", "darkred")  # or any other color palette you prefer
# Plot with adjusted colors
ggplot(NSF_Grant_Award_Instrument, aes(x = Organization, y = count, fill = AwardInstrument)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("Number of Counts of Action Type by Institution") +
xlab("") +
ylab("Number of Active Grants") +
scale_fill_manual(values = my_colors_4) +  # Add this line to set custom colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 14))
# Read the Excel file
DOEawardsUI_Dates <- read_xlsx("DOEawards.xlsx")
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(knitr)
library(ggplot2)
# Read the Excel file
DOEawardsUI_Dates <- read_xlsx("DOEawards.xlsx")
filtered_data_UI_DOE <- DOEawardsUI_Dates %>%
filter(Institution == 'Regents of the University of Idaho')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
filtered_data_UI_10y_DOE <- filtered_data_UI_DOE %>%
filter(`Start Date` >= ten_years_ago)
#USDA
# Read the Excel file
USDAawardsUI_Dates <- read_xlsx("USDAtoUI_Edited_YR.xlsx")
filtered_data_UI_USDA <- USDAawardsUI_Dates %>%
filter(Institution == 'University of Idaho')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
filtered_data_UI_10y_USDA <- filtered_data_UI_USDA %>%
filter(`Award Date` >= ten_years_ago)
#NIH
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
filtered_data_UI_NIH <- NIHawardsUI_Dates %>%
filter(Institution == 'UNIVERSITY OF IDAHO')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
# Assuming the date format is Month/Day/Year
filtered_data_UI_10y_NIH <- filtered_data_UI_NIH %>%
filter(as.Date(`Project Start Date`, format = "%m/%d/%Y") >= ten_years_ago)
#NSF
# Read the Excel file
NSFawardsUI_Dates <- read_xlsx("NSF_ALL_YR.xlsx")
filtered_data_UI_NSF <- NSFawardsUI_Dates %>%
filter(Institution == 'University of Idaho')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
# Assuming the date format is Month/Day/Year
filtered_data_UI_10y_NSF <- filtered_data_UI_NSF %>%
filter(as.Date(StartDate, format = "%m/%d/%Y") >= ten_years_ago)
# Remove dollar signs ($) and commas (,) from numeric columns
filtered_data_UI_10y_NSF <- filtered_data_UI_10y_NSF %>%
mutate(AwardedAmountToDate = as.numeric(gsub("[\\$,]", "", AwardedAmountToDate)))
# Sum the total amount by start date for each sponsor
amount_sum_DOE <- filtered_data_UI_10y_DOE %>%
group_by(`Start Date`) %>%
summarize(Total_Amount = sum(`Amount Awarded to Date`))
amount_sum_USDA <- filtered_data_UI_10y_USDA %>%
group_by(`Award Date`) %>%
summarize(Total_Amount = sum(`Award Dollars`))
amount_sum_NIH <- filtered_data_UI_10y_NIH %>%
group_by(`Project Start Date`) %>%
summarize(Total_Amount = sum(`Total Cost`))
amount_sum_NSF <- filtered_data_UI_10y_NSF %>%
group_by(StartDate) %>%
summarize(Total_Amount = sum(AwardedAmountToDate))
# Add Sponsor column to each data frame
amount_sum_DOE <- amount_sum_DOE %>% mutate(Sponsor = "DOE")
amount_sum_USDA <- amount_sum_USDA %>% mutate(Sponsor = "USDA")
amount_sum_NIH <- amount_sum_NIH %>% mutate(Sponsor = "NIH")
amount_sum_NSF <- amount_sum_NSF %>% mutate(Sponsor = "NSF")
# For DOE dataset
amount_sum_DOE <- amount_sum_DOE %>%
rename(Start_Date = `Start Date`) %>%
mutate(Sponsor = "DOE")
# For USDA dataset
amount_sum_USDA <- amount_sum_USDA %>%
rename(Start_Date = `Award Date`) %>%
mutate(Sponsor = "USDA")
# For NIH dataset
amount_sum_NIH <- amount_sum_NIH  %>%
rename(Start_Date = `Project Start Date`) %>%
mutate(Sponsor = "NIH")
# For NSF dataset
amount_sum_NSF <- amount_sum_NSF %>%
rename(Start_Date = StartDate) %>%
mutate(Sponsor = "NSF")
# Assuming Start_Date is in character format, convert it to datetime
amount_sum_DOE <- amount_sum_DOE %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
amount_sum_USDA <- amount_sum_USDA %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
amount_sum_NIH <- amount_sum_NIH %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
amount_sum_NSF <- amount_sum_NSF %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
# Combine the data frames
all_amount_sum <- bind_rows(
amount_sum_DOE %>% mutate(Sponsor = "DOE"),
amount_sum_USDA %>% mutate(Sponsor = "USDA"),
amount_sum_NIH %>% mutate(Sponsor = "NIH"),
amount_sum_NSF %>% mutate(Sponsor = "NSF")
)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
library(scales)
# Plot the timeline with overlapping lines, adjusted x-axis labels, individual colors, and centralized title
ggplot(all_amount_sum, aes(x = Start_Date, y = Total_Amount / 1e6, color = Sponsor, group = Sponsor)) +
geom_line(size = 1) +
labs(title = "Awards Timeline by Sponsor - Total Amount",
x = "Start Date",
y = "Total Amount (Millions)") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", expand = c(0, 0)) +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
scale_color_manual(values = sponsor_colors) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
library(tidyverse)
library(readxl)
library(knitr)
USDAUI  <- read.csv("USDAtoUI.csv")
knitr::kable(head(USDAUI))
library(dplyr)
# Assuming 'Date' is the column containing the grant date information
start_date <- as.Date("2021-01-01")
end_date <- as.Date("2024-03-15")
UIgrants_recent_grantsUSDA <- USDAUI %>%
filter(Award.Date >= start_date & Award.Date <= end_date) %>%
arrange(desc(Award.Date))
library(dplyr)
start_date <- as.Date("2024-01-01")
end_date <- as.Date("2024-12-31")
UIgrants_2024_grantsUSDA <- UIgrants_recent_grantsUSDA %>%
filter(Award.Date >= start_date & Award.Date <= end_date) %>%
summarise(UIgrants_2024_grantsUSDA = n())
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(knitr)
library(ggplot2)
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate, yend = PI)) +
geom_segment(size = 5, color = "gold") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(color = PI), size = 5) +  # Segment colored by PI
geom_text(aes(label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI, color = PI), size = 5) +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5) +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
nt_text(size = 6))  # Reduce the size of y-axis labels
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5) +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 0.5, color = "gold", lineend = "round") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(x = StartDate - lubridate::days(5), xend = EndDate + lubridate::days(5), y = PI, yend = PI), size = 0.5, color = "gold", lineend = "round") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
