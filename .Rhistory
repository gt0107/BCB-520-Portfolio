Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5) +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
nt_text(size = 6))  # Reduce the size of y-axis labels
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5) +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = StartDate + (EndDate - StartDate) / 2, label = Amount), vjust = -0.5) +  # Add text labels for amounts
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis labels
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 0.5, color = "gold", lineend = "round") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(x = StartDate - lubridate::days(5), xend = EndDate + lubridate::days(5), y = PI, yend = PI), size = 0.5, color = "gold", lineend = "round") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1) +  # Add text labels for amounts at the end of bars
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
# Plot the graph with customized edge colors
plot(
g,
layout = layout_with_fr,
edge.color = edge_colors,
vertex.label.color = "black",
vertex.size = 10,
vertex.label.cex = 0.8,
edge.arrow.size = 0.5
)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Assuming 'relations' dataframe has 'BCB520' and 'Advisor' columns
relations <- data.frame(
from = c("Alice", "Bob", "Charlie"),
to = c("Bob", "Charlie", "David"),
BCB520 = c("TRUE", "FALSE", "TRUE"),
Advisor = c("FALSE", "TRUE", "TRUE")
)
# Create the graph
g <- graph_from_data_frame(relations, directed = FALSE, vertices = people)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
library(readxl)
people<-read_xlsx("Networks.xlsx", sheet = "People")
relations<-read_xlsx("Networks.xlsx", sheet ="Relations")
g <- graph_from_data_frame(relations, directed=FALSE, vertices=people)
plot(g)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
plot(g,  layout = layout_with_fr)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
plot(g,  layout = layout_with_fr)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Assuming 'relations' dataframe has 'BCB520' and 'Advisor' columns
relations <- data.frame(
from = c("Alice", "Bob", "Charlie"),
to = c("Bob", "Charlie", "David"),
BCB520 = c("TRUE", "FALSE", "TRUE"),
Advisor = c("FALSE", "TRUE", "TRUE")
)
# Create the graph
g <- graph_from_data_frame(relations, directed = FALSE, vertices = people)
library(igraph)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people)
# Define edge colors based on attributes
edge_colors <- ifelse(E(g)$BCB520 == "TRUE", palette[1], ifelse(E(g)$Advisor == "TRUE", palette[2], "black"))
# Plot the graph with customized edge colors
plot(
g,
layout = layout_with_fr,
edge.color = edge_colors,
vertex.label.color = "black",
vertex.size = 10,
vertex.label.cex = 0.8,
edge.arrow.size = 0.5
)
# Plot the graph with customized edge colors
plot(
g,
layout = layout_with_kk,
edge.color = edge_colors,
vertex.label.color = "black",
vertex.size = 10,
vertex.label.cex = 0.8,
edge.arrow.size = 0.5
)
# Plot the graph with customized edge colors
plot(
g,
layout = layout_with_lgl,
edge.color = edge_colors,
vertex.label.color = "black",
vertex.size = 10,
vertex.label.cex = 0.8,
edge.arrow.size = 0.5
)
# Plot the graph with customized edge colors
plot(
g,
layout = layout_nicely,
edge.color = edge_colors,
vertex.label.color = "black",
vertex.size = 10,
vertex.label.cex = 0.8,
edge.arrow.size = 0.5
)
# Plot the graph
plot(g, layout = layout_with_fr)
#Coloring the nodes according to Department
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = unique(c(edgelist_df$from, edgelist_df$to)))
#Coloring the nodes according to Department
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Get unique vertices
all_vertices <- unique(c(relations3$from, relations3$to))
# Filter people data to include only vertices in the edge list
people_filtered <- people[people$name %in% all_vertices, ]
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people_filtered)
View(people)
View(people_filtered)
#Coloring the nodes according to Department
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Get unique vertices
all_vertices <- unique(c(relations3$from, relations3$to))
# Filter people data to include only vertices in the edge list
people_filtered <- people[people$name %in% all_vertices, ]
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people_filtered)
#Coloring the nodes according to Department
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Create the graph
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Create the graph
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Filter the edge list to include only vertex names present in the vertex data frame
valid_vertices <- unique(c(relations3$from, relations3$to))
valid_relations3 <- relations3[relations3$from %in% valid_vertices & relations3$to %in% valid_vertices, ]
# Create the graph
g <- graph_from_data_frame(valid_relations3, directed=FALSE, vertices=people)
library(igraph)
# Assuming 'people' dataframe contains 'name' and 'Department' columns
# Filter people data for BCB520 == "TRUE"
BCB <- people %>%
filter(BCB520 == "TRUE") %>%
select(name, BCB520)
# Generate edge list
edgelist <- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
# Add attributes to the edge list
edgelist_df$BCB520 <- "TRUE"
edgelist_df$Advisor <- "FALSE"
# Add BCB520 attribute to relations data
relations$BCB520 <- "FALSE"
# Combine relations and edgelist_df
relations3 <- rbind(relations, edgelist_df)
# Check and filter out edge list vertices not present in the vertex data frame
valid_vertices <- intersect(unique(relations3$from), unique(relations3$to))
people_filtered <- people[people$name %in% valid_vertices, ]
# Create the graph
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people_filtered)
View(valid_relations3)
# Check which vertex names in the edge list are not listed in the vertex data frame
invalid_vertices <- setdiff(unique(c(relations3$from, relations3$to)), people_filtered$name)
# Print out the invalid vertices
print(invalid_vertices)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Get unique departments
departments <- unique(people$Department)
# Define colors for each department
department_colors <- rainbow(length(departments))
# Map department colors to vertices
V(g)$color <- department_colors[match(people$Department, departments)]
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people)
# Check which vertex names in the edge list are not listed in the vertex data frame
invalid_vertices <- setdiff(unique(c(relations3$from, relations3$to)), people$name)
# Print out the invalid vertices
print(invalid_vertices)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people)
library(igraph)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
library(dplyr)
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
library(igraph)
# Assuming you already have 'people' and 'relations' data frames
# Color Palette
palette <- c("blue", "red")
# Create the graph
g <- graph_from_data_frame(relations3, directed = FALSE, vertices = people)
