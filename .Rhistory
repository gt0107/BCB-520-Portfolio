library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Convert Amount to numeric
Q1_Data_Amount$Amount <- as.numeric(Q1_Data_Amount$Amount)
# Check if there are any non-numeric values in Amount
non_numeric <- Q1_Data_Amount[!is.na(as.numeric(Q1_Data_Amount$Amount)), ]
# Check the structure of the Amount variable
str(Q1_Data_Amount$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Convert Amount to numeric
Q1_Data_Amount$Amount <- as.numeric(Q1_Data_Amount$Amount)
# Check if there are any non-numeric values in Amount
non_numeric <- Q1_Data_Amount[!is.na(as.numeric(Q1_Data_Amount$Amount)), ]
# Check the structure of the Amount variable
str(Q1_Data_Amount$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
View(Q1_Data_Amount)
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Convert Amount to numeric
Q1_Data_Amount$Amount <- as.numeric(Q1_Data_Amount$Amount)
# Check if there are any non-numeric values in Amount
non_numeric <- Q1_Data_Amount[!is.na(as.numeric(Q1_Data_Amount$Amount)), ]
# Check the structure of the Amount variable
str(Q1_Data_Amount$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
library(readxl)
Q1_Compilled_Data_4 <- read_excel("posts/MidtermPortfolioPost/Q1_Compilled_Data_4.xlsx")
View(Q1_Compilled_Data_4)
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
## Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", "", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
View(Q1_Data_Amount_2)
# Remove rows with NA values in the Amount column
Q1_Data_Amount_2 <- Q1_Data_Amount_2[!is.na(Q1_Data_Amount_2$Amount), ]
# Check if there are any remaining NA values
any(is.na(Q1_Data_Amount_2$Amount))
View(Q1_Data_Amount_2)
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", "", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
View(Q1_Data_Amount_2)
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", ",", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
View(Q1_Data_Amount_2)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
View(Q1_Data_Amount_2)
# Create a bar graph with the Original_Amount column
ggplot(Q1_Data_Amount_2, aes(x = Your_X_Variable, y = Original_Amount)) +
geom_bar(stat = "identity") +
labs(title = "Your Title",
x = "Your X Label",
y = "Your Y Label")
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", ",", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Create a bar graph with the Original_Amount column
ggplot(Q1_Data_Amount_2, aes(x = Your_X_Variable, y = Original_Amount)) +
geom_bar(stat = "identity") +
labs(title = "Your Title",
x = "Your X Label",
y = "Your Y Label")
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", ",", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
# Check the structure of the Amount variable
str(Q1_Data_Amount_2$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
graph4 = ({
nodes: [
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("baseballr")
install.packages("baseballr")
world_map <- ne_countries(scale = "medium", returnclass = "sf")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence<- Malaria%>%
filter(Metric == "Infection Prevalence")%>%
mutate(Prevalence = Value, Year = as.factor(Year))
#%>%
#select(c(ISO3, Prevalence, Year))
Chlamydia < - read_excel("ChlamydiaInfectionRate.xlsx")
library(readxl)
Chlamydia < - read_excel("ChlamydiaInfectionRate.xlsx")
# Read the Excel file
Chlamydia <- read_excel("ChlamydiaInfectionRate.xlsx")
View(Chlamydia)
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
Malaria <- read.csv("National_Unit_data.csv")
Incidence<- Malaria%>%
filter(Metric == "Infection Prevalence")%>%
mutate(Prevalence = Value, Year = as.factor(Year))
#%>%
#select(c(ISO3, Prevalence, Year))
View(Malaria)
View(Incidence)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(readxl)
# Read the Excel file
Chlamydia <- read_excel("ChlamydiaInfectionRate.xlsx")
US_Chl <- ne_countries(scale = "medium", returnclass = "sf")
map_data_Chla <- US_Chl %>%
left_join(Chlamydia, by = c("iso_a3" = "ISO3"))%>%
filter(!is.na(Prevalence))
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(readxl)
# Read the Excel file
Chlamydia <- read_excel("ChlamydiaInfectionRate.xlsx")
US_Chl <- ne_countries(scale = "medium", returnclass = "sf")
map_data_Chla <- US_Chl %>%
left_join(Chlamydia, by = c("iso_a3" = "ISO3"))%>%
filter(!is.na(Cases))
library(readr)
National_Unit_data <- read_csv("posts/MapsSpatialData/National_Unit_data.csv")
View(National_Unit_data)
install.packages("maps")
library(ggplot2)
library(sf)
library(maps)
# Load U.S. map data
usa <- map_data("usa")
# Plot U.S. map
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
library(ggplot2)
library(sf)
library(maps)
# Load U.S. map data
usa <- map_data("usa")
# Plot U.S. map
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load U.S. state boundary data
states <- map_data("state")
# Plot U.S. map with state boundaries
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states, aes(x = long, y = lat, group = group), fill = NA, color = "gray") + # Add state boundaries
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load your Chlamydia cases dataset (assuming it's named 'chlamydia_data')
# Replace 'state_name' with the column name containing state names or codes in your dataset
chlamydia_data <- read_excel("ChlamydiaInfectionRate")
# Load your Chlamydia cases dataset (assuming it's named 'chlamydia_data')
# Replace 'state_name' with the column name containing state names or codes in your dataset
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "Cases", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = chlamydia_cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
View(chlamydia_data)
# Load required package for reading Excel files
install.packages("readxl")
library(readxl)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load required package for reading Excel files
install.packages("readxl")
library(readxl)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load required package for reading Excel files
library(readxl)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load required package for reading Excel files
library(readxl)
library(ggplot2)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load required packages
library(readxl)
library(ggplot2)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
View(states_chlamydia)
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(States, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Load required packages
library(readxl)
library(ggplot2)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Trim leading and trailing spaces from the key columns
states$region <- trimws(states$region)
chlamydia_data$State <- trimws(chlamydia_data$State)
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
View(states_chlamydia)
View(states)
# Load required packages
library(readxl)
library(ggplot2)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Unique values in the 'region' column of the 'states' dataframe
unique(states$region)
# Unique values in the 'State' column of the 'chlamydia_data' dataframe
unique(chlamydia_data$State)
# Trim leading and trailing spaces from the key columns
states$region <- trimws(states$region)
chlamydia_data$State <- trimws(chlamydia_data$State)
# Convert key columns to lowercase before merging
states$region <- tolower(states$region)
chlamydia_data$State <- tolower(chlamydia_data$State)
# Perform merge
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "white", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
View(states_chlamydia)
# Load required packages
library(readxl)
library(ggplot2)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Unique values in the 'region' column of the 'states' dataframe
unique(states$region)
# Unique values in the 'State' column of the 'chlamydia_data' dataframe
unique(chlamydia_data$State)
# Trim leading and trailing spaces from the key columns
states$region <- trimws(states$region)
chlamydia_data$State <- trimws(chlamydia_data$State)
# Convert key columns to lowercase before merging
states$region <- tolower(states$region)
chlamydia_data$State <- tolower(chlamydia_data$State)
# Perform merge
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NULL, name = "Chlamydia Cases") + # Customize the color scale and remove NA values
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Load required packages
library(readxl)
library(ggplot2)
# Load your Chlamydia cases dataset (assuming it's named 'ChlamydiaInfectionRate.xlsx')
chlamydia_data <- read_excel("ChlamydiaInfectionRate.xlsx")
# Merge Chlamydia cases data with state boundaries data
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Unique values in the 'region' column of the 'states' dataframe
unique(states$region)
# Unique values in the 'State' column of the 'chlamydia_data' dataframe
unique(chlamydia_data$State)
# Trim leading and trailing spaces from the key columns
states$region <- trimws(states$region)
chlamydia_data$State <- trimws(chlamydia_data$State)
# Convert key columns to lowercase before merging
states$region <- tolower(states$region)
chlamydia_data$State <- tolower(chlamydia_data$State)
# Perform merge
states_chlamydia <- merge(states, chlamydia_data, by.x = "region", by.y = "State", all.x = TRUE)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "gray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "black") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightpink", high = "darkred", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradientn(colors = pink_palette, name = "Chlamydia Cases") + # Customize the color scale with discrete colors
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
pink_palette <- scales::hue_pal()(5, h = c(0, 360), c = 100, l = 65)
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradientn(colors = color_palette, name = "Chlamydia Cases") + # Customize the color scale with discrete colors
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Define a sequence of colors with different saturations
color_palette <- c("lightpink", "pink", "hotpink", "deeppink", "darkred")
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradientn(colors = color_palette, name = "Chlamydia Cases") + # Customize the color scale with discrete colors
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "lightblue", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightpink", high = "darkred", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightpink", high = "darkred", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
# Plot the map with Chlamydia cases data
ggplot() +
geom_polygon(data = usa, aes(x = long, y = lat, group = group), color = "black") +
geom_polygon(data = states_chlamydia, aes(x = long, y = lat, group = group, fill = Cases), color = "darkgray") + # Add state boundaries with Chlamydia cases
scale_fill_gradient(low = "lightpink", high = "darkred", name = "Chlamydia Cases") + # Customize the color scale
coord_fixed(1.3) +  # Aspect ratio adjustment
theme_void()  # Remove unnecessary elements
