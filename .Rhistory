stations_rain <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
View(stations_rain)
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
plotly_map <- plotly_map %>%
add_markers(
data = stations_rain,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "square",       # Change the symbol to square
color = "navy",          # Change the color to blue
size = ~`2009`           # Size based on rainfall in 2009
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
plotly_map <- plotly_map %>%
add_markers(
data = stations_rain,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",       # Change the symbol to square
color = "navy",          # Change the color to blue
size = ~`2009`           # Size based on rainfall in 2009
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# First, filter for all months (1-12) and select the necessary columns
stations_rain_2 <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME, starts_with("2009")) %>%
unique()
# Then, calculate the average rainfall for each station across all months
stations_rain$average_rainfall <- rowMeans(stations_rain[, 5:ncol(stations_rain)], na.rm = TRUE)
# First, filter for all months (1-12) and select the necessary columns
stations_rain_2 <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH) %>%
unique()
View(stations_rain_2)
# First, filter for all months (1-12) and select the necessary columns
stations_rain_2 <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009", "2010") %>%
unique()
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, starts_with("2009"), starts_with("2010")) %>%
unique()
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, 6:17], na.rm = TRUE)  # Columns 6 to 17 represent 2009
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, starts_with("2009"), starts_with("2010")) %>%
unique()
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, c(starts_with("2009"))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, matches("^2009|^2010")) %>%
unique()
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, grepl("^2009", names(stations_rain_2))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, matches("^2009|^2010")) %>%
unique()
# Convert the columns representing rainfall data to numeric
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))] <- lapply(
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))],
as.numeric
)
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, grepl("^2009", names(stations_rain_2))], na.rm = TRUE)
stations_rain_2$average_rainfall_2010 <- rowMeans(stations_rain_2[, grepl("^2010", names(stations_rain_2))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, matches("^2009|^2010")) %>%
unique()
# Convert the columns representing rainfall data to numeric
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))] <- lapply(
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))],
as.numeric
)
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, grepl("^2009", names(stations_rain_2))], na.rm = TRUE)
stations_rain_2$average_rainfall_2010 <- rowMeans(stations_rain_2[, grepl("^2010", names(stations_rain_2))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, matches("^2009|^2010")) %>%
unique()
# Remove duplicate rows
stations_rain_2 <- unique(stations_rain_2)
# Convert the columns representing rainfall data to numeric
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))] <- lapply(
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))],
as.numeric
)
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, grepl("^2009", names(stations_rain_2))], na.rm = TRUE)
stations_rain_2$average_rainfall_2010 <- rowMeans(stations_rain_2[, grepl("^2010", names(stations_rain_2))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, matches("^2009|^2010")) %>%
unique()
# Remove duplicate rows
stations_rain_2 <- unique(stations_rain_2)
# Convert the columns representing rainfall data to numeric
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))] <- lapply(
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))],
as.numeric
)
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, grepl("^2009", names(stations_rain_2))], na.rm = TRUE)
stations_rain_2$average_rainfall_2010 <- rowMeans(stations_rain_2[, grepl("^2010", names(stations_rain_2))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1-12 and select the necessary columns for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, matches("^2009|^2010")) %>%
unique()
# Remove duplicate rows
stations_rain_2 <- unique(stations_rain_2)
# Convert the columns representing rainfall data to numeric
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))] <- lapply(
stations_rain_2[, grepl("^2009|^2010", names(stations_rain_2))],
as.numeric
)
# Calculate the average rainfall for each station across months 1-12 for years 2009 and 2010
stations_rain_2$average_rainfall_2009 <- rowMeans(stations_rain_2[, grepl("^2009", names(stations_rain_2))], na.rm = TRUE)
stations_rain_2$average_rainfall_2010 <- rowMeans(stations_rain_2[, grepl("^2010", names(stations_rain_2))], na.rm = TRUE)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
plotly_map <- plotly_map %>%
add_markers(
data = stations_rain,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",       # Change the symbol to square
color = "navy",          # Change the color to blue
size = ~`2009`           # Size based on rainfall in 2009
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
library(plotly)
library(ggplot2)
library(maps)
# Get the map data for Puerto Rico
map_data <- map_data("world", region = "Puerto Rico")
# Create the base map with ggplot2
base_map <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("Map of Puerto Rico")
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', and 'NAME'
# Add station markers to the Plotly map
plotly_map <- plotly_map %>%
add_markers(
data = stations,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "square",  # Change the symbol to square
color = "navy",     # Change the color to blue
size = 10           # Change the size to 10
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
# Display the map
print(plotly_map)
library(plotly)
library(ggplot2)
library(maps)
# Get the map data for Puerto Rico
map_data <- map_data("world", region = "Puerto Rico")
# Create the base map with ggplot2
base_map <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("Map of Puerto Rico")
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', and 'NAME'
# Add station markers to the Plotly map
plotly_map <- plotly_map %>%
add_markers(
data = stations,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",  # Change the symbol to square
color = "navy",     # Change the color to blue
size = 10           # Change the size to 10
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
View(stations_rain)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1 and 2 for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:2 & (year == 2009 | year == 2010)) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, starts_with("2009"), starts_with("2010")) %>%
unique()
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Assuming your date column is named 'DATE', you can extract the year from it.
# Filter the dataset for months 1 and 2 for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:2 & (year(as.Date(DATE)) == 2009 | year(as.Date(DATE)) == 2010)) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, starts_with("2009"), starts_with("2010")) %>%
unique()
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Filter the dataset for months 1 and 2 for years 2009 and 2010
stations_rain_2 <- rainfallprwide %>%
filter(MONTH %in% 1:2 & (year(as.Date(DATE)) == 2009 | year(as.Date(DATE)) == 2010)) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, starts_with("2009"), starts_with("2010")) %>%
unique()
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
library(plotly)
library(ggplot2)
library(maps)
# Get the map data for Puerto Rico
map_data <- map_data("world", region = "Puerto Rico")
# Create the base map with ggplot2
base_map <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("Map of Puerto Rico")
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', and 'NAME'
# Add station markers to the Plotly map
plotly_map <- plotly_map %>%
add_markers(
data = stations,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",  # Change the symbol to square
color = "navy",     # Change the color to blue
size = 10           # Change the size to 10
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)
# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
plotly_map <- plotly_map %>%
add_markers(
data = stations_rain,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",       # Change the symbol to square
color = "navy",          # Change the color to blue
size = ~`2009`           # Size based on rainfall in 2009
),
hoverinfo = "text"
)
# Display the map
print(plotly_map)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain_ <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
View(rainfallprwide)
# Create the stations data frame and filter for month 1
rainfallaveragetotal <- rainfallprwide %>%
unique()
View(rainfallaveragetotal)
# Create the stations data frame and filter for month 1
rainfallaveragetotal <- rainfallprwide %>%
unique()
View(stations)
# Create the stations data frame and filter for month 1
rainfallaveragetotal <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME)%>%
unique()
View(rainfallaveragetotal)
# Create the stations data frame and filter for month 1
rainfallaveragetotal <- rainfallprwide %>%
unique()
unique()
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
rainfallaveragetotal <- rainfallprwide %>%
mutate_(ELEVATION)
library(tidyverse)
library(readxl)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
rainfallaveragetotal <- rainfallprwide %>%
mutate(ELEVATION) %>%
unique()
View(rainfallaveragetotal)
library(dplyr)
# Assuming your dataset is named 'rainfallprwide'
# Group the data by station and month, and calculate the average for each year
average_by_station_month_year <- rainfallprwide %>%
group_by(STATION, MONTH) %>%
summarize(
average_2009 = mean(`2009`, na.rm = TRUE),
average_2010 = mean(`2010`, na.rm = TRUE),
# Add more years as needed
.groups = "drop"
)
# Now 'average_by_station_month_year' contains the average rainfall for each station by month for each year.
View(average_by_station_month_year)
library(dplyr)
# Assuming your dataset is named 'rainfallprwide'
# Filter the dataset to include only unique combinations of station and month
unique_station_month <- rainfallprwide %>%
distinct(STATION, MONTH)
# Calculate the average rainfall for each station by month for each year
average_by_station_month_year <- unique_station_month %>%
mutate(
average_2009 = rowMeans(select(rainfallprwide, `2009`), na.rm = TRUE),
average_2010 = rowMeans(select(rainfallprwide, `2010`), na.rm = TRUE),
# Add more years as needed
.keep = "unused"
)
