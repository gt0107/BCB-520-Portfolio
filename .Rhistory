) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games") +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)]) # Optional: Adjust to display fewer labels
ibrary(ggplot2)
library(ggplot2)
library(RColorBrewer)
# Enhanced ggplot with additional aesthetic improvements
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack", color = "grey80", size = 0.1) +  # Adding subtle borders
scale_fill_brewer(palette = "Dark2") +  # Use a palette with high contrast
theme_minimal(base_size = 12) +  # Adjusting base font size for overall consistency
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "grey20"),  # Enhancing x-axis labels
axis.text.y = element_text(size = 10, color = "grey20"),  # Enhancing y-axis labels
axis.title.x = element_text(size = 12, face = "bold", margin = margin(t = 10)),  # Styling x-axis title
axis.title.y = element_text(size = 12, face = "bold", margin = margin(r = 10)),  # Styling y-axis title
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centering and emphasizing the plot title
legend.position = "right",  # Adjusting legend position for better layout
legend.title = element_text(size = 12),  # Styling the legend title for clarity
legend.text = element_text(size = 10)  # Adjusting legend text size for readability
) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games") +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)])
title_year_games <- my_df %>%
select(Year, Genre) %>%
count(Year, Genre)
library(ggplot2)
library(RColorBrewer)
# Enhanced ggplot with additional aesthetic improvements
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack", color = "grey80", size = 0.1) +  # Adding subtle borders
scale_fill_brewer(palette = "Dark2") +  # Use a palette with high contrast
theme_minimal(base_size = 12) +  # Adjusting base font size for overall consistency
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "grey20"),  # Enhancing x-axis labels
axis.text.y = element_text(size = 10, color = "grey20"),  # Enhancing y-axis labels
axis.title.x = element_text(size = 12, face = "bold", margin = margin(t = 10)),  # Styling x-axis title
axis.title.y = element_text(size = 12, face = "bold", margin = margin(r = 10)),  # Styling y-axis title
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centering and emphasizing the plot title
legend.position = "right",  # Adjusting legend position for better layout
legend.title = element_text(size = 12),  # Styling the legend title for clarity
legend.text = element_text(size = 10)  # Adjusting legend text size for readability
) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games") +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)])
library(ggplot2)
library(viridis)  # Load the viridis package for its color palettes
install.packages("viridis")
library(ggplot2)
library(viridis)  # Load the viridis package for its color palettes
# Enhanced ggplot with the viridis color palette
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack", color = "grey80", size = 0.1) +  # Adding subtle borders
scale_fill_viridis_d() +  # Use the viridis discrete color palette
theme_minimal(base_size = 12) +  # Adjusting base font size for overall consistency
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "grey20"),  # Enhancing x-axis labels
axis.text.y = element_text(size = 10, color = "grey20"),  # Enhancing y-axis labels
axis.title.x = element_text(size = 12, face = "bold", margin = margin(t = 10)),  # Styling x-axis title
axis.title.y = element_text(size = 12, face = "bold", margin = margin(r = 10)),  # Styling y-axis title
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centering and emphasizing the plot title
legend.position = "right",  # Adjusting legend position for better layout
legend.title = element_text(size = 12),  # Styling the legend title for clarity
legend.text = element_text(size = 10)  # Adjusting legend text size for readability
) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games") +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)])  # Skipping some x-axis labels for clarity
# Note: The use of scale_fill_viridis_d() applies the default viridis color palette for discrete data.
title_year_games <- my_df %>%
select(Year, Genre) %>%
count(Year, Genre)
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = “identity”, position = “stack”) +
title_year_games <- my_df %>%
select(Year, Genre) %>%
count(Year, Genre)
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack") + # Stacked bar chart
theme_minimal() +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games")
title_year_games <- my_df %>%
select(Year, Genre) %>%
count(Year, Genre)
library(ggplot2)
# Example using title_year_games data frame
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10), # Rotate and adjust size of x-axis labels
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games")
title_year_games <- my_df %>%
select(Year, Genre) %>%
count(Year, Genre)
library(ggplot2)
library(viridis)  # Load the viridis package for its color palettes
# Enhanced ggplot with the viridis color palette
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack", color = "grey80", size = 0.1) +  # Adding subtle borders
scale_fill_viridis_d() +  # Use the viridis discrete color palette
theme_minimal(base_size = 12) +  # Adjusting base font size for overall consistency
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "grey20"),  # Enhancing x-axis labels
axis.text.y = element_text(size = 10, color = "grey20"),  # Enhancing y-axis labels
axis.title.x = element_text(size = 12, face = "bold", margin = margin(t = 10)),  # Styling x-axis title
axis.title.y = element_text(size = 12, face = "bold", margin = margin(r = 10)),  # Styling y-axis title
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centering and emphasizing the plot title
legend.position = "right",  # Adjusting legend position for better layout
legend.title = element_text(size = 12),  # Styling the legend title for clarity
legend.text = element_text(size = 10)  # Adjusting legend text size for readability
) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games") +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)])  # Skipping some x-axis labels for clarity
# Note: The use of scale_fill_viridis_d() applies the default viridis color palette for discrete data.
title_year_games <- my_df %>%
select(Year, Genre) %>%
count(Year, Genre)
library(ggplot2)
library(viridis)  # Load the viridis package for its color palettes
# Enhanced ggplot with the viridis color palette
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack", color = "grey80", size = 0.1) +  # Adding subtle borders
scale_fill_viridis_d() +  # Use the viridis discrete color palette
theme_minimal(base_size = 12) +  # Adjusting base font size for overall consistency
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10, color = "grey20"),  # Enhancing x-axis labels
axis.text.y = element_text(size = 10, color = "grey20"),  # Enhancing y-axis labels
axis.title.x = element_text(size = 12, face = "bold", margin = margin(t = 10)),  # Styling x-axis title
axis.title.y = element_text(size = 12, face = "bold", margin = margin(r = 10)),  # Styling y-axis title
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centering and emphasizing the plot title
legend.position = "right",  # Adjusting legend position for better layout
legend.title = element_text(size = 12),  # Styling the legend title for clarity
legend.text = element_text(size = 10)  # Adjusting legend text size for readability
) +
ggtitle("Number of Games per Genre per Year") +
xlab("Year") +
ylab("Number of Games") +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)])
title_genre<-my_df%>%
select(Genre,`Game Title`)%>%
group_by(Genre, `Game Title`)%>%
summarise(count=n_distinct('Game Title'))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(my_df, aes(x = Platform, fill = Platform)) +
geom_bar(color = "black", width = 0.7) +
ggtitle("Platform Distribution") +
xlab("Platform") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Platform,Name)%>%
group_by(Platform, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Platform) %>%
summarise(TotalCount = sum(count))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
View(title_genre)
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
```
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre)
View(title_genre)
summarise(TotalCount = sum(count))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre)
summarise(TotalCount = sum(count))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
library(ggplot2)
library(viridis)  # For appealing color palettes
# Assuming title_year_games is already defined
ggplot(title_year_games, aes(x = Year, y = n, fill = Genre)) +
geom_bar(stat = "identity", position = "stack", color = "grey90", size = 0.1) +  # Subtle border for definition
scale_fill_viridis_d(option = "magma") +  # Magma palette for a vibrant look
theme_minimal(base_size = 14) +  # Clean theme with a larger base font size for readability
labs(
title = "Number of Games per Genre per Year",
x = "Year",
y = "Number of Games",
fill = "Genre"  # Label for the legend
) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5, color = "grey20"),
axis.title = element_text(size = 14, face = "bold", color = "grey20"),
axis.text = element_text(size = 12, color = "grey20"),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Improve label readability
legend.position = "right",
legend.title = element_text(size = 14, face = "bold", color = "grey20"),
legend.text = element_text(size = 12, color = "grey20"),
plot.background = element_rect(fill = "white"),  # White background for a clean look
panel.grid.minor = element_blank(),  # Remove minor grid lines to reduce clutter
panel.grid.major.x = element_blank(),  # Remove vertical grid lines
panel.grid.major.y = element_line(color = "grey90")  # Lighter horizontal grid lines
) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 2)])  # Reduce x-axis label clutter
# Consider saving the plot with a higher resolution for presentations or publications
ggsave("enhanced_plot.png", width = 12, height = 8, dpi = 300)
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre_2<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
View(title_genre_2)
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre_2<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
title_genre_2<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
