library(tidyverse)
library(readxl)
library(knitr)
BSUUSDA  <- read.csv("USDABSU.csv")
knitr::kable(head(USDAUI))
library(tidyverse)
library(readxl)
library(knitr)
BSUUSDA  <- read.csv("USDABSU.csv")
knitr::kable(head(BSUUSDA))
library(tidyverse)
library(readxl)
library(knitr)
ISUUSDA  <- read.csv("USDAISU.csv")
knitr::kable(head(ISUUSDA))
library(readxl)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFtoUI <- bind_rows(NSFtoUI, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
install.packages("httr")
install.packages("httr2")
install.packages("jsonlite")
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFtoUI <- bind_rows(NSFtoUI, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
View(NSFtoUI)
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22boise+state+university%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFBSU <- bind_rows(NSFBSU, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22boise+state+university%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFBSU <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFBSU <- bind_rows(NSFBSU, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22boise+state+university%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFBSU <- bind_rows(NSFBSU, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22boise+state+university%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFBSU <- bind_rows(NSFBSU, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22boise+state+university%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFBSU <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFBSU <- bind_rows(NSFBSU, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
View(NSFBSU)
library(readxl)
library(httr)
library(jsonlite)
library(dplyr)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22boise+state+university%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFBSU <- bind_rows(NSFBSU, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
library(tidyverse)
library(readxl)
library(knitr)
USDAUI  <- read.csv("USDAtoUI.csv")
library(readr)
NIHUI <- read_csv("posts/MidtermPortfolioPost/NIHUI.csv")
View(NIHUI)
library(readxl)
NIHUI_2 <- read_excel("posts/MidtermPortfolioPost/NIHUI_2.xlsx")
View(NIHUI_2)
library(readxl)
library(dplyr)
NIHUIAwardsActive <- read_xlsx("NIHUI_2.xlsx")
View(NIHUIAwardsActive)
library(readxl)
library(dplyr)
NIHUIAwardsActive <- read_xlsx("NIHUI_2.xlsx")
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
View(NIHUI_New_Awards_Specific)
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- read_xlsx("NIHUI_2.xlsx")
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
knitr::kable(head(NIHUI_New_Awards_Specific))
library(readr)
NIHBSU <- read_csv("posts/MidtermPortfolioPost/NIHBSU.csv")
View(NIHBSU)
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read.csv("NIHBSU.csv")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read.csv("NIHBSU.csv")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select(`Project Title`, `Administering IC`, `Award Notice Date`, `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, `Total Cost`, `Total Cost (Sub Projects)`, `Funding IC(s)`, `Direct Cost IC`, `InDirect Cost IC`, `Total Cost IC`)
NIHBSUAwardsActive <- read.csv("NIHBSU.csv")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select(`Project Title`, `Administering IC`, `Award Notice Date`, `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, `Total Cost`, `Total Cost (Sub Projects)`, `Funding IC(s)`, `Direct Cost IC`, `InDirect Cost IC`, `Total Cost IC`)
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read.csv("NIHBSU.csv")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select("Project Title", `Administering IC`, `Award Notice Date`, `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, `Total Cost`, `Total Cost (Sub Projects)`, `Funding IC(s)`, `Direct Cost IC`, `InDirect Cost IC`, `Total Cost IC`)
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read.csv("NIHBSU.csv")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select("Project Title", `Administering IC`, `Award Notice Date`, `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, `Total Cost`, `Total Cost (Sub Projects)`, `Funding IC(s)`, `Direct Cost IC`, `InDirect Cost IC`, `Total Cost IC`)
library(readxl)
NIHBSU_2 <- read_excel("posts/MidtermPortfolioPost/NIHBSU_2.xlsx")
View(NIHBSU_2)
NIHBSUAwardsActive <- read_xlsx("NIHBSU_2.xlsx")
View(NIHBSUAwardsActive)
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read_xlsx("NIHBSU_2.xlsx")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
knitr::kable(head(NIHBSU_New_Awards_Specific))
NIHISUAwardsActive <- read_xlsx("NIHISU_2.xlsx")
library(readxl)
library(dplyr)
library(tidyverse)
NIHISUAwardsActive <- read_xlsx("NIHISU_2.xlsx")
NIHISU_New_Awards_Specific <- NIHISUAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
knitr::kable(head(NIHISU_New_Awards_Specific))
NSFUIAwardsActive <- read.csv("NSFUI.csv")
View(NSFUIAwardsActive)
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read.csv("NSFUI.csv")
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate )
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xlsx")
library(readxl)
NSFUI_2 <- read_excel("posts/MidtermPortfolioPost/NSFUI_2.xls")
View(NSFUI_2)
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xls")
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xlsx")
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate )
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xlsx")
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate )
View(NSFUI_2)
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xlsx")
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('Title', 'NSFOrganization', 'StartDate', ` LastAmendmentDate`, `EndDate`, `AwardedAmountToDate `)
library(readxl)
library(dplyr)
library(tidyverse)
library(knitr) # Ensure knitr is explicitly loaded for kable()
# Reading the dataset from an Excel file
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xlsx")
# Selecting specific columns, ensure there are no leading or trailing spaces in column names
NSFUI_New_Awards_Specific <- NSFUIAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate)
# Displaying the first few rows in a table format
knitr::kable(head(NSFUI_New_Awards_Specific))
library(readxl)
NSFBSU_2 <- read_excel("posts/MidtermPortfolioPost/NSFBSU_2.xlsx")
View(NSFBSU_2)
library(readxl)
library(dplyr)
library(tidyverse)
library(knitr) # Ensure knitr is explicitly loaded for kable()
# Reading the dataset from an Excel file
NSFBSUAwardsActive <- read_xlsx("NSFBSU_2.xlsx")
# Selecting specific columns, ensure there are no leading or trailing spaces in column names
NSFBSU_New_Awards_Specific <- NSFBSUAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate)
# Displaying the first few rows in a table format
knitr::kable(head(NSFBSU_New_Awards_Specific))
library(readxl)
NSFISU_2 <- read_excel("posts/MidtermPortfolioPost/NSFISU_2.xlsx")
View(NSFISU_2)
library(readxl)
library(dplyr)
library(tidyverse)
library(knitr) # Ensure knitr is explicitly loaded for kable()
# Reading the dataset from an Excel file
NSFISUAwardsActive <- read_xlsx("NSFISU_2.xlsx")
# Selecting specific columns, ensure there are no leading or trailing spaces in column names
NSFISU_New_Awards_Specific <- NSFISUAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate)
# Displaying the first few rows in a table format
knitr::kable(head(NSFISU_New_Awards_Specific))
