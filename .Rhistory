group_by(PI) %>%
mutate(total_amount = sum(total_amount)) %>%
ungroup() %>%
mutate(percentage = total_amount / sum(total_amount))
# Create stacked bar plot using ggplot2
ggplot(data, aes(x = reorder(PI, total_amount), y = percentage, fill = Sponsor)) +
geom_bar(stat = "identity") +
labs(x = "PI Names", y = "Percentage") +
scale_fill_brewer(palette = "Set3") +  # Choose color palette
theme_minimal() +  # Optional: apply a minimal theme
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 20),  # Increase title size
axis.title.x = element_text(size = 16),  # Increase x-axis label size
axis.title.y = element_text(size = 16),  # Increase y-axis label size
axis.text = element_text(size = 14),  # Increase axis tick label size
legend.text = element_text(size = 14),  # Increase legend text size
legend.title = element_text(size = 16))  # Increase legend title size
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
View(Q1_NIH)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
View(data)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
# Create a violin plot
ggplot(data, aes(x = PI, y = Amount)) +
geom_violin() +
labs(title = "Distribution of Amount Awarded to Principal Investigators",
x = "Principal Investigator",
y = "Amount Awarded") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
# Assuming 'data' contains the subset of data with 'Amount' and 'PI' columns
# Replace 'data' with your actual dataset name
# Determine the range for the y-axis
y_range <- range(data$Amount)  # This will find the minimum and maximum values in the 'Amount' column
# Extend the y-axis range by a factor (e.g., 10%)
extension_factor <- 0.1  # You can adjust this factor based on your preference
# Compute the extended y-axis limits
extended_y_limits <- c(y_range[1] - extension_factor * diff(y_range),
y_range[2] + extension_factor * diff(y_range))
# Create a violin plot with extended y-axis
ggplot(data, aes(x = PI, y = Amount)) +
geom_violin() +
ylim(extended_y_limits) +  # Set the y-axis limits
labs(title = "Distribution of Amount Awarded to Principal Investigators",
x = "Principal Investigator",
y = "Amount Awarded") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
# Create a violin plot with extended y-axis
ggplot(data, aes(x = PI, y = Amount)) +
geom_violin() +
ylim(extended_y_limits) +  # Set the y-axis limits
labs(title = "Distribution of Amount Awarded to Principal Investigators",
x = "Principal Investigator",
y = "Amount Awarded") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# COMPARISON BETWEEEN NIH - AWARD MONEY - CALCULATED THE AVERAGE INSTEAD THE TOTAL AMMOUNT
library(dplyr)
library(ggplot2)
# Calculate total award money for each institution, removing NA values in TotalCost
NIH_total_award_money <- NIH_Compare_Data %>%
group_by(OrganizationName) %>%
summarise(NIH_total_award_money = sum(TotalCost, na.rm = TRUE))
# Colors
my_colors_3 <- c("BOISE STATE UNIVERSITY" = "orange", "IDAHO STATE UNIVERSITY" = "black", "UNIVERSITY OF IDAHO" = "gold")
library(ggplot2)
ggplot(NIH_total_award_money, aes(x = OrganizationName, y = NIH_total_award_money)) +
geom_bar(stat = "identity", position = "dodge", fill = my_colors_3)  +
ggtitle("Total of Award Money from NIH Grants") +
xlab("") +
ylab("Total Award Money") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Adjust size of x-axis labels
axis.text.y = element_text(size = 12),  # Adjust size of y-axis labels
legend.text = element_text(size = 12),  # Adjust size of legend text
plot.title = element_text(hjust = 0.5, size = 14)) +  # Adjust size of plot title
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = "M"))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
# Create a violin plot with extended y-axis
ggplot(data, aes(x = PI, y = Amount)) +
geom_violin() +
ylim(extended_y_limits) +  # Set the y-axis limits
labs(title = "Distribution of Amount Awarded to Principal Investigators",
x = "Principal Investigator",
y = "Amount Awarded") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = "M"))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
# Create a violin plot with extended y-axis
ggplot(data, aes(x = PI, y = Amount)) +
geom_violin() +
ylim(extended_y_limits) +  # Set the y-axis limits
labs(title = "Distribution of Amount Awarded to Principal Investigators",
x = "Principal Investigator",
y = "Amount Awarded") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = "M"))
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read the Excel file
Q1_NIH <- read_xlsx("Q1_NIH.xlsx")
# View the data related to Amount and PI columns
data <- Q1_NIH[, c("Amount", "PI")]
head(data)
# Define the extended y-axis limits
extended_y_limits <- c(0, 10000000)  # For example, extend the y-axis from 0 to 10,000,000 (10 million)
# Create a violin plot with extended y-axis
ggplot(data, aes(x = PI, y = Amount)) +
geom_violin() +
ylim(extended_y_limits) +  # Set the y-axis limits
labs(title = "Distribution of Amount Awarded to Principal Investigators",
x = "Principal Investigator",
y = "Amount Awarded") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = "M"))
library(ggplot2)
library(dplyr)
# Assuming you have a data frame named awards_data with columns PI, StartDate, EndDate, and Amount
# Convert StartDate and EndDate to Date objects
awards_data$StartDate <- as.Date(awards_data$StartDate)
awards_data$EndDate <- as.Date(awards_data$EndDate)
# Create a data frame with cumulative amounts awarded to each PI over time
cumulative_data <- awards_data %>%
group_by(PI) %>%
mutate(CumulativeAmount = cumsum(Amount)) %>%
ungroup()
View(awards_data)
library(ggplot2)
library(dplyr)
# Assuming you have a data frame named awards_data with columns PI, StartDate, EndDate, and Amount
# Convert StartDate and EndDate to Date objects
awards_data$StartDate <- as.Date(awards_data$StartDate)
awards_data$EndDate <- as.Date(awards_data$EndDate)
# Create a data frame with cumulative amounts awarded to each PI over time
cumulative_data <- awards_data %>%
group_by(PIName) %>%
mutate(CumulativeAmount = cumsum(Amount)) %>%
ungroup()
# Create the line plot
ggplot(cumulative_data, aes(x = StartDate, y = CumulativeAmount, color = PI)) +
geom_line() +
labs(title = "Cumulative Amount Awarded to PIs Over Time",
x = "Start Date",
y = "Cumulative Amount Awarded",
color = "PI") +
theme_minimal()
library(ggplot2)
library(dplyr)
# Assuming you have a data frame named awards_data with columns PI, StartDate, EndDate, and Amount
# Convert StartDate and EndDate to Date objects
awards_data$StartDate <- as.Date(awards_data$StartDate)
awards_data$EndDate <- as.Date(awards_data$EndDate)
# Create a data frame with cumulative amounts awarded to each PI over time
cumulative_data <- awards_data %>%
group_by(PIName) %>%
mutate(CumulativeAmount = cumsum(Amount)) %>%
ungroup()
# Create the line plot
ggplot(cumulative_data, aes(x = StartDate, y = CumulativeAmount, color = PIName)) +
geom_line() +
labs(title = "Cumulative Amount Awarded to PIs Over Time",
x = "Start Date",
y = "Cumulative Amount Awarded",
color = "PI") +
theme_minimal()
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
DOEawardsUI <- read_xlsx("DOEawards.xlsx", .name_repair = "minimal")
library(readxl)
library(dplyr)
DOEawardsUI <- read_xlsx("DOEawards.xlsx")
DOEUI_General <- DOEawardsUI %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOEUI_New_Awards <- DOEUI_General %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOEUI_New_Awards))
library(tidyverse)
library(readr)
DOEawardsUI <- suppressMessages(read_xlsx("DOEawards.xlsx"))
library(tidyverse)
library(readxl)
library(knitr)
USDAUI  <- read.csv("USDAtoUI.csv")
knitr::kable(head(USDAUI))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
library(readxl)
DOEawardsUI <- read_xlsx("DOEawards.xlsx", .name_repair = "minimal")
library(readxl)
library(dplyr)
DOEawardsUI <- read_xlsx("DOEawards.xlsx")
DOEUI_General <- DOEawardsUI %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOEUI_New_Awards <- DOEUI_General %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOEUI_New_Awards))
library(tidyverse)
library(readr)
DOEawardsUI <- suppressMessages(read_xlsx("DOEawards.xlsx"))
#DOE
library(readxl)
library(dplyr)
library(lubridate)
# Read the Excel file
DOEawardsUI_Dates <- read_xlsx("DOEawards.xlsx")
filtered_data_UI_DOE <- DOEawardsUI_Dates %>%
filter(Institution == 'Regents of the University of Idaho')
#USDA
USDAawardsUI_Dates <- read.csv("USDAtoUI.csv")
# Assuming the start date column is named "Start_Date"
five_years_ago <- Sys.Date() - years(5)  # Calculate the date 5 years ago
# Filter the data to include only awards that started 5 years ago or later
filtered_data_UI_5y_USDA <- USDAawardsUI_Dates %>%
filter(Award.Date >= five_years_ago)
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  # Calculate the date 5 years ago
# Filter the data to include only awards that started 5 years ago or later
filtered_data_UI_10y_USDA <- USDAawardsUI_Dates %>%
filter(Award.Date >= ten_years_ago)
library(tidyverse)
library(readxl)
library(knitr)
BSUUSDA  <- read.csv("USDABSU.csv")
knitr::kable(head(BSUUSDA,3))
library(tidyverse)
library(readxl)
library(knitr)
BSUUSDA  <- read.csv("USDABSU.csv")
knitr::kable(head(BSUUSDA,4))
library(readxl)
library(dplyr)
DOEawardsBSU <- read_xlsx("DOEawards.xlsx")
DOEBSU_General <- DOEawardsBSU %>%
dplyr::filter(Institution == 'Boise State University')
DOEBSU_New_Awards <- DOEBSU_General %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOEBSU_New_Awards,4))
library(tidyverse)
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read_xlsx("NIHBSU_2.xlsx")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
knitr::kable(head(NIHBSU_New_Awards_Specific),4)
library(readxl)
library(dplyr)
library(tidyverse)
NIHBSUAwardsActive <- read_xlsx("NIHBSU_2.xlsx")
NIHBSU_New_Awards_Specific <- NIHBSUAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
knitr::kable(head(NIHBSU_New_Awards_Specific,4))
library(readxl)
library(dplyr)
library(tidyverse)
library(knitr) # Ensure knitr is explicitly loaded for kable()
# Reading the dataset from an Excel file
NSFBSUAwardsActive <- read_xlsx("NSFBSU_2.xlsx")
# Selecting specific columns, ensure there are no leading or trailing spaces in column names
NSFBSU_New_Awards_Specific <- NSFBSUAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate)
# Displaying the first few rows in a table format
knitr::kable(head(NSFBSU_New_Awards_Specific,4))
library(readxl)
library(dplyr)
library(tidyverse)
DOEaward <- read_xlsx("DOEawards.xlsx")
DOEIDAHOSATTE_General <- DOEaward %>%
dplyr::filter(Institution == 'Idaho State University')
DOEDAHOSATTE_New_Awards <- DOEIDAHOSATTE_General %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOEDAHOSATTE_New_Awards,4))
library(tidyverse)
library(readxl)
library(knitr)
ISUUSDA  <- read.csv("USDAISU.csv")
knitr::kable(head(ISUUSDA,4))
library(readxl)
library(dplyr)
library(tidyverse)
NIHISUAwardsActive <- read_xlsx("NIHISU_2.xlsx")
NIHISU_New_Awards_Specific <- NIHISUAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
knitr::kable(head(NIHISU_New_Awards_Specific,4))
library(readxl)
library(dplyr)
library(tidyverse)
library(knitr) # Ensure knitr is explicitly loaded for kable()
# Reading the dataset from an Excel file
NSFISUAwardsActive <- read_xlsx("NSFISU_2.xlsx")
# Selecting specific columns, ensure there are no leading or trailing spaces in column names
NSFISU_New_Awards_Specific <- NSFISUAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate)
# Displaying the first few rows in a table format
knitr::kable(head(NSFISU_New_Awards_Specific,4))
library(readxl)
library(dplyr)
library(tidyverse)
DOEawardsUI <- read_xlsx("DOEawards.xlsx", .name_repair = "minimal")
DOEawardsUI <- read_xlsx("DOEawards.xlsx")
DOEUI_General <- DOEawardsUI %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOEUI_New_Awards <- DOEUI_General %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOEUI_New_Awards))
library(readr)
DOEawardsUI <- suppressMessages(read_xlsx("DOEawards.xlsx"))
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
# Load the readxl package
library(readxl)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
View(NIHawardsUI_Dates)
library(readxl)
library(dplyr)
library(lubridate)
# Load the readxl package
library(readxl)
# Read the Excel file NIH
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
# Assuming the start date column is named "Start_Date"
Ten_years_ago <- Sys.Date() - years(10)  # Calculate the date 5 years ago
# Filter the data to include only awards that started 5 years ago or later
filtered_data_UI_10y_NIH <- NIHawardsUI_Dates %>%
filter(Award.Date >= Ten_years_ago)
library(readxl)
library(dplyr)
library(lubridate)
# Load the readxl package
library(readxl)
# Read the Excel file NIH
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
# Assuming the start date column is named "Start_Date"
Ten_years_ago <- Sys.Date() - years(10)  # Calculate the date 5 years ago
# Filter the data to include only awards that started 5 years ago or later
filtered_data_UI_10y_NIH <- NIHawardsUI_Dates %>%
filter("Project Start Date" >= Ten_years_ago)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
# Define the date format
NIHawardsUI_Dates$`Project Start Date` <- mdy(NIHawardsUI_Dates$`Project Start Date`)
# Calculate the date 10 years ago
Ten_years_ago <- Sys.Date() - years(10)
# Filter the data to include only awards that started 10 years ago or later
filtered_data_UI_10y_NIH <- NIHawardsUI_Dates %>%
filter(`Project Start Date` >= Ten_years_ago)
View(filtered_data_UI_10y_NIH)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
filtered_data_UI_NIH <- NIHawardsUI_Dates %>%
filter(Institution == 'UNIVERSITY OF IDAHO')
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
filtered_data_UI_NIH <- NIHawardsUI_Dates %>%
filter('Organization Name' == 'UNIVERSITY OF IDAHO')
# Define the date format
NIHawardsUI_Dates$`Project Start Date` <- mdy(NIHawardsUI_Dates$`Project Start Date`)
# Calculate the date 10 years ago
Ten_years_ago <- Sys.Date() - years(10)
# Filter the data to include only awards that started 10 years ago or later
filtered_data_UI_10y_NIH <- NIHawardsUI_Dates %>%
filter(`Project Start Date` >= Ten_years_ago)
View(filtered_data_UI_NIH)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
filtered_data_UI_NIH <- NIHawardsUI_Dates %>%
filter('Organization Name' == 'UNIVERSITY OF IDAHO')
# Define the date format
NIHawardsUI_Dates$`Project Start Date` <- mdy(NIHawardsUI_Dates$`Project Start Date`)
# Calculate the date 10 years ago
Ten_years_ago <- Sys.Date() - years(10)
# Filter the data to include only awards that started 10 years ago or later
filtered_data_UI_10y_NIH <- NIHawardsUI_Dates %>%
filter(`Project Start Date` >= Ten_years_ago)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
filtered_data_UI_NIH <- NIHawardsUI_Dates %>%
filter('Organization Name' == 'UNIVERSITY OF IDAHO')
# Define the date format
NIHawardsUI_Dates$`Project Start Date` <- mdy(NIHawardsUI_Dates$`Project Start Date`)
# Calculate the date 10 years ago
Ten_years_ago <- Sys.Date() - years(10)
# Filter the data to include only awards that started 10 years ago or later
filtered_data_UI_10y_NIH <- NIHawardsUI_Dates %>%
filter(`Project Start Date` >= Ten_years_ago)
View(filtered_data_UI_10y_NIH)
filtered_data_UI_10y_NIH_UI <- filtered_data_UI_10y_NIH %>%
filter('Organization Name' == 'UNIVERSITY OF IDAHO')
filtered_data_UI_10y_NIH_UI <- filtered_data_UI_10y_NIH %>%
filter(`Organization Name` == 'UNIVERSITY OF IDAHO')
View(filtered_data_UI_10y_NIH_UI)
# Read the Excel file
NSHawardsUI_Dates <- read_xlsx("NSF_ALL_YR.xlsx")
View(NSHawardsUI_Dates)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NSHawardsUI_Dates <- read_xlsx("NSF_ALL_YR.xlsx")
# Define the date format
NSFawardsUI_Dates$StartDate <- mdy(NSHawardsUI_Dates$StartDate)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NSHawardsUI_Dates <- read_xlsx("NSF_ALL_YR.xlsx")
# Define the date format
NSHawardsUI_Dates$StartDate <- mdy(NSHawardsUI_Dates$StartDate)
# Calculate the date 10 years ago
Ten_years_ago <- Sys.Date() - years(10)
# Filter the data to include only awards that started 10 years ago or later
filtered_data_UI_10y_NSF <- NSHawardsUI_Dates %>%
filter(`Project Start Date` >= Ten_years_ago)
library(dplyr)
library(readxl)
library(lubridate)
# Read the Excel file
NSHawardsUI_Dates <- read_xlsx("NSF_ALL_YR.xlsx")
# Define the date format
NSHawardsUI_Dates$StartDate <- mdy(NSHawardsUI_Dates$StartDate)
# Calculate the date 10 years ago
Ten_years_ago <- Sys.Date() - years(10)
# Filter the data to include only awards that started 10 years ago or later
filtered_data_UI_10y_NSF <- NSHawardsUI_Dates %>%
filter(StartDate >= Ten_years_ago)
View(filtered_data_UI_10y_NSF)
