select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009", "2010","2011",) %>%
unique()
View(stations_rain_avg)
# Create the stations data frame and filter for month 1
stations_rain_avg <- rainfallprwide %>%
filter(MONTH == 1-12) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009", "2010","2011",) %>%
unique()
View(stations_rain_avg)
# Create the stations data frame and filter for month 1
stations_rain_avg <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009", "2010","2011",) %>%
unique()
View(stations_rain_avg)
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Extract year from the combined year-month column
rainfallprwide <- rainfallprwide %>%
mutate(Year = as.integer(substr(MONTH, 1, 4)))  # Assuming MONTH contains both year and month
# Select relevant columns for each year and unique stations
stations_rain_avg <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME, Year, "2009", "2010", "2011") %>%
unique()
# Calculate yearly total and average rainfall across stations
yearly_rainfall_avg <- stations_rain_avg %>%
group_by(Year) %>%
summarise(Total_Rainfall = sum(`2009`, na.rm = TRUE),
Avg_Rainfall = mean(`2009`, na.rm = TRUE))  # Adjust column name accordingly
# Print the result
print(yearly_rainfall_avg)
View(stations_rain_avg)
View(yearly_rainfall_avg)
# Load necessary libraries
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Calculate total rainfall for each station
station_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(Total_Rainfall = sum(`2009` + `2010` + `2011`, na.rm = TRUE))
# Print the result
print(station_total_rainfall)
View(station_total_rainfall)
# Load necessary libraries
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Calculate total rainfall for each station
station_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(Total_Rainfall = sum(`2009` + `2010` + `2011`, na.rm = TRUE))
# Print the result
print(station_total_rainfall)
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Extract year from the combined year-month column
rainfallprwide <- rainfallprwide %>%
mutate(Year = substr(MONTH, 1, 4))
# Calculate total rainfall for each station for each year
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME, Year) %>%
summarise(Total_Rainfall = sum(`2009`, na.rm = TRUE))  # Adjust column name accordingly
# Print the result
print(station_year_total_rainfall)
View(station_total_rainfall)
View(station_year_total_rainfall)
# Load necessary libraries
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Calculate total rainfall for each station
station_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(Total_Rainfall = sum(`2009` + `2010` + `2011`, na.rm = TRUE))
# Print the result
print(station_total_rainfall)
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Calculate total rainfall for each station for each year
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME, YEAR) %>%
summarise(Total_Rainfall = sum(`2009`, na.rm = TRUE))  # Adjust column name accordingly
View(station_total_rainfall)
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(`Total_Rainfall_2009` = sum(`2009`, na.rm = TRUE),
`Total_Rainfall_2010` = sum(`2010`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2011`, na.rm = TRUE))
# Print the result
print(station_year_total_rainfall)
View(rainfallprwide)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(`Total_Rainfall_2009` = sum(`2009`, na.rm = TRUE),
`Total_Rainfall_2010` = sum(`2010`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2012`, na.rm = TRUE)
`Total_Rainfall_2011` = sum(`2013`, na.rm = TRUE)
# Load necessary libraries
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(`Total_Rainfall_2009` = sum(`2009`, na.rm = TRUE),
`Total_Rainfall_2010` = sum(`2010`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2012`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2013`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2014`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2015`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2016`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2017`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2018`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2019`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2020`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2021`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2022`, na.rm = TRUE),
`Total_Rainfall_2011` = sum(`2023`, na.rm = TRUE))
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Extract years from column names
years <- as.character(2009:2023)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Extract years from column names
years <- as.character(2009:2023)
# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
# Print the result
print(station_year_total_rainfall)
library(tidyverse)
library(readxl)
library(viridis)
library (plotly)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
stations <- rainfallprwide %>%
select(STATION, LATITUDE, LONGITUDE, NAME)%>%
unique()
g <- list(
scope = 'north america',
center = list(lat = 18.2208, lon = -66.5901),  # Centered on Puerto Rico
projection = list(type = 'mercator'),
showland = TRUE,
landcolor = "rgb(220, 220, 220)",  # Light gray
subunitcolor = "rgb(200, 200, 200)",  # Light gray
countrycolor = "rgb(200, 200, 200)",  # Light gray
countrywidth = 0.5,
subunitwidth = 0.5
)
plot_geo(stations, lat = ~LATITUDE, lon = ~LONGITUDE) %>%
add_markers(
text = ~NAME,
symbol = I("circle"),
size = I(10),
hoverinfo = "text"
) %>%
layout(
title = 'Rainfall in Puerto Rico Stations',
geo = g
)
#2009
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
library (knitr)
library(plotly)
library(maps)
library(tidyverse)
DataTable <- read_xlsx("geraline_data_mm.xlsx")
# Assuming you want to select only the first 10 columns from DataTable
selected_columns <- DataTable[, 1:10]
# Displaying the selected columns using knitr::kable()
knitr::kable(head(selected_columns))
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Extract years from column names
years <- as.character(2009:2023)
# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
#2009
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Extract years from column names
years <- as.character(2009:2023)
# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
base_map_2 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("RainFall for 2009") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map_2)
# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
plotly_map %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",       # Change the symbol to square
color = ~Total_Rainfall_2009 / 100,          # Change the color to blue
size = ~Total_Rainfall_2009 / 100,
colorscale = "Blues",
reversescale = TRUE              # Size based on rainfall in 2009
),
hoverinfo = "text"
)
#2009
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
filter(MONTH == 1) %>%
select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
unique()
# Extract years from column names
years <- as.character(2009:2023)
# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
base_map_2 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("RainFall for January 2009") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map_2)
# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
plotly_map %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",       # Change the symbol to square
color = ~Total_Rainfall_2009 / 100,          # Change the color to blue
size = ~Total_Rainfall_2009 / 100,
colorscale = "Blues",
reversescale = TRUE              # Size based on rainfall in 2009
),
hoverinfo = "text"
)
base_map_3 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("15 Years of RainFall in Puerto Rico") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Create an empty list to store the plots
plot_list <- list()
# Loop over each year
for (year in 2009:2023) {
# Create a map for the current year
plot <- ggplotly(base_map_3) %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",
color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
colorscale = "Blues",
reversescale = TRUE
),
hoverinfo = "text"
)
# Add the plot to the list
plot_list[[year - 2008]] <- plot
}
# Arrange the plots in a grid
subplot(plot_list, nrows = 5)
View(plot_list)
base_map_3 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("15 Years of RainFall in Puerto Rico") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Create an empty list to store the plots
plot_list <- list()
# Loop over each year
for (year in 2009:2023) {
# Create a map for the current year
plot <- ggplotly(base_map_3 + ggtitle(paste0("RainFall in Puerto Rico for the Year ", year))) %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",
color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
colorscale = "Blues",
reversescale = TRUE
),
hoverinfo = "text"
)
# Add the plot to the list
plot_list[[year - 2008]] <- plot
}
base_map_3 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("15 Years of RainFall in Puerto Rico") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Create an empty list to store the plots
plot_list <- list()
# Loop over each year
for (year in 2009:2023) {
# Create a map for the current year
plot <- ggplotly(base_map_3 + ggtitle(paste0("RainFall in Puerto Rico for the Year ", year))) %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",
color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
colorscale = "Blues",
reversescale = TRUE
),
hoverinfo = "text"
)
# Add the plot to the list
plot_list[[year - 2008]] <- plot
}
base_map_3 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("15 Years of RainFall in Puerto Rico") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Create an empty list to store the plots
plot_list <- list()
# Loop over each year
for (year in 2009:2023) {
# Create a map for the current year
plot <- ggplotly(base_map_3 + ggtitle(paste0("RainFall in Puerto Rico for the Year ", year))) %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",
color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
colorscale = "Blues",
reversescale = TRUE
),
hoverinfo = "text"
)
# Add the plot to the list
plot_list[[year - 2008]] <- plot
}
# Print the plot
print(plot_list)
base_map_3 <- ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
coord_map() +
ggtitle("15 Years of RainFall in Puerto Rico") +
theme(plot.title = element_text(hjust = 0.5),  # Centering title
axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label
# Create an empty list to store the plots
plot_list <- list()
# Loop over each year
for (year in 2009:2023) {
# Create a map for the current year
plot <- ggplotly(base_map_3) %>%
add_markers(
data = station_year_total_rainfall,
x = ~LONGITUDE,
y = ~LATITUDE,
text = ~NAME,
marker = list(
symbol = "circle",
color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
colorscale = "Blues",
reversescale = TRUE
),
hoverinfo = "text"
)
# Add the plot to the list
plot_list[[year - 2008]] <- plot
}
# Arrange the plots in a grid
subplot(plot_list, nrows = 5)
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
library (knitr)
library(plotly)
library(maps)
library(tidyverse)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(knitr)
library(ggplot2)
DataDictionary <- read_xlsx("Data Dictionary.xlsx")
knitr::kable(head(DataDictionary ))
DataTable <- read_xlsx("geraline_data_mm.xlsx")
# Assuming you want to select only the first 10 columns from DataTable
selected_columns <- DataTable[, 1:10]
# Displaying the selected columns using knitr::kable()
knitr::kable(head(selected_columns))
DataDic <- read_xlsx("data dic.xlsx")
# Assuming you want to select only the first 10 columns from DataTable
# Displaying the selected columns using knitr::kable()
knitr::kable(head(DataDic))
# Get the spatial data for countries
countries <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the dataset to extract Puerto Rico
puerto_rico <- subset(countries, admin == "Puerto Rico")
# Plot Puerto Rico's geometry
ggplot() +
geom_sf(data = puerto_rico) +
theme_void()
library(dplyr)
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')
# Extract years from column names
years <- as.character(2009:2023)
# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)
# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
