ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre_2<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
View(title_genre_2)
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre_2<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
title_genre_2<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
library(ggplot2)
library(viridis)  # For appealing color palettes, ensure it's installed with install.packages("viridis")
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
# Note: The 'plasma' option from the viridis package offers a striking range of colors to distinguish the genres.
# The 'begin' and 'end' parameters in scale_fill_viridis_d help in selecting a subset of the color range for even better aesthetics.
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
library(readxl)
my_df <- read_excel("VIdeo_Game_sales.xlsx")
knitr::kable(head(my_df,10))
library(tidyverse)
ggplot(data = my_df, aes(x = Genre, y = Name, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(my_df, aes(x = Genre, y = Name, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12)
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12)
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
library(ggplot2)
library(viridis)
title_genre$Genre <- reorder(title_genre$Genre, title_genre$TotalCount)
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
scale_fill_viridis_d(option = "plasma", begin = 0.1, end = 0.9) +  # Applying a vibrant color palette with good contrast
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12) +  # Using a minimal theme with a base font size for better readability
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold", color = "grey20"),  # Centered and bold title with adjusted color
axis.title = element_text(size = 14, face = "bold", color = "grey20"),  # Bold and slightly larger axis titles for clarity
axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "grey20", vjust = 1),  # Adjusted x-axis labels for better legibility
axis.text.y = element_text(size = 12, color = "grey20"),  # Y-axis labels with adjusted size and color
legend.position = "none"  # Removing the legend since the fill color is directly linked to the x-axis labels
)
title_genre<-my_df%>%
select(Genre,Name)%>%
group_by(Genre, Name)%>%
summarise(count=n_distinct(Name))%>%
group_by(Genre) %>%
summarise(TotalCount = sum(count))
ggplot(data = title_genre, aes(x = Genre, y = TotalCount, fill = Genre)) +
geom_col(color = "black", width = 0.7) +
ggtitle("Genre Distribution") +
xlab("Genre") +
ylab("Game Titles") +
theme_minimal(base_size = 12)
NHLDraft<-read.csv("NHLDraft.csv")
library(tidyr)
library(dplyr)
library(repurrrsive)
install.packages("repurrrsive")
library(tidyr)
library(dplyr)
library(repurrrsive)
library(tibblify)
install.packages("tibblify")
library(tidyr)
library(dplyr)
library(repurrrsive)
library(tibblify)
library(purrr)
library(tidyverse)
library(readxl)
library(rjson)
library(jsonlite)
library(ggplot2)
Bio<-fromJSON("draft.json")
library(readxl)
NHL_Drafts <- read_excel("NHLDraftsPicks.csv")
library(readr)
NHLDraftsPicks <- read_csv("posts/VisualizationTabularData/NHLDraftsPicks.csv")
View(NHLDraftsPicks)
library(readxl)
NHL_Drafts <- read_excel("NHLDraftsPicks.csv")
library(readxl)
NHL_Drafts <- read_excel("NHLDraftsPicks.xlsx")
knitr::kable(head(NHL_Drafts,10))
library(tidyverse)
library(readxl)
NHLDraftsPicks <- read_excel("posts/VisualizationTabularData/NHLDraftsPicks.xlsx")
View(NHLDraftsPicks)
Draft_2022 <- NHL_Drafts %>%
select(Year, Genre) %>%
count(Year, Genre)
Draft_2022 <- NHL_Drafts %>%
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022 & postdraft==0)
View(Draft_2022)
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022)
View(Draft_2022)
Draft_2021 <- NHL_Drafts %>%
filter(draftyear==2021)
Draft_2020 <- NHL_Drafts %>%
filter(draftyear==2020)
View(Draft_2020)
geom_point()
ggplot(Draft_2022, aes(x=round, y=NHLgames)+
geom_point()
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point()
library(readxl)
NHL_Drafts <- read_excel("NHLDraftsPicks.xlsx")
knitr::kable(head(NHL_Drafts,10))
library(tidyverse)
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022)
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point()
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point()
theme_minimal(base_size = 14) +
ggtitle("NHL 2022 Draft Players") +
xlab("Round PLayers Drafted") + ylab("NHL Games Played")
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point() +
theme_minimal(base_size = 14) +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point() +
theme_minimal(base_size = 14) +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played") +
theme(plot.title = element_text(hjust = 0.5))
library(readxl)
NHL_Drafts <- read_excel("NHLDraftsPicks.xlsx")
knitr::kable(head(NHL_Drafts,10))
library(tidyverse)
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_jitter(width = 0.2, height = 0) +  # Jittering only along the x-axis
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point(alpha = 0.5) +  # Adjust alpha level as needed
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point(alpha = 0.5) +  # Adjust alpha level as needed
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
theme(plot.title = element_text(hjust = 0.5))
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point(alpha = 0.5) +  # Adjust alpha level as needed
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_count() +  # Points are scaled based on count
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
# Assuming 'Importance' is a variable indicating the importance of each point
ggplot(Draft_2022, aes(x = round, y = NHLgames, color = Importance)) +
geom_point() +
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames, color = Importance)) +
geom_point() +
theme_minimal() +
ggtitle("NHL 2022 Draft Players") +
xlab("Round Players Drafted") +
ylab("NHL Games Played")+
theme(plot.title = element_text(hjust = 0.5))
install.packages("ggridges")
library(ggridges)
ggplot(Draft_2022, aes(x = round, y = NHLgames, height = ..density..)) +
geom_density_ridges(jittered_points = TRUE) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("Round Players Drafted") +
ylab("Density")
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round), fill = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 0.9) +
scale_fill_viridis_d() +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round), fill = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density, Amplified") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round), fill = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round), fill = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +  # Amplify the ridges
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density, Amplified") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density, Amplified") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point()
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022)
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density, Amplified") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(readxl)
NHL_Drafts <- read_excel("NHLDraftsPicks.xlsx")
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022)
library(ggplot2)
ggplot(Draft_2022, aes(x = round, y = NHLgames)) +
geom_point()
library(ggplot2)
library(ggridges)
ggplot(Draft_2022, aes(x = NHLgames, y = factor(round))) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density, Amplified") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022)
View(Draft_2022)
Draft_2022 <- NHL_Drafts %>%
filter(draftyear==2022)
library(ggplot2)
library(ggridges)
Draft_2022$round <- factor(Draft_2022$round, levels = sort(unique(Draft_2022$round)), ordered = TRUE)
ggplot(Draft_2022, aes(x = NHLgames, y = round)) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(ggridges)
Draft_2022$round <- factor(Draft_2022$round, levels = sort(unique(Draft_2022$round)), ordered = TRUE)
ggplot(Draft_2022, aes(x = NHLgames, y = round)) +
geom_density_ridges(aes(height = ..density..), jittered_points = TRUE, scale = 3) +
theme_minimal() +
ggtitle("NHL 2022 Draft Players Density") +
xlab("NHL Games Played") +
ylab("Draft Round")+
theme(plot.title = element_text(hjust = 0.5))
