geom_rect(aes(xmin = StartDate, xmax = EndDate, ymin = PI - 0.1, ymax = PI + 0.1), fill = "gold") +  # Bars colored by PI with black borders
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1, size = 2) +  # Add text labels for amounts at the end of bars with reduced size
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_rect(aes(xmin = StartDate, xmax = EndDate, ymin = as.numeric(PI) - 0.1, ymax = as.numeric(PI) + 0.1), fill = "gold") +  # Bars colored by PI with black borders
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1, size = 2) +  # Add text labels for amounts at the end of bars with reduced size
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1, size = 2.5) +  # Add text labels for amounts at the end of bars with reduced size
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Calculate extended limits for y-axis
extended_min_PI <- min(Q1_PI_NSF$PI) - 1  # Extend by 1 unit below the minimum PI
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1, size = 2.5) +  # Add text labels for amounts at the end of bars with reduced size
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
scale_y_continuous(limits = c(extended_min_PI, extended_max_PI)) +  # Extend y-axis limits
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
library(ggplot2)
library(readxl)
library(dplyr)
library(lubridate)
# Read the data
Q1_Data_PI <- read_xlsx("Q1_Compilled_Data.xlsx")
# Filter the data for DOE sponsor
Q1_PI_NSF <- Q1_Data_PI %>%
filter(Sponsor == "NSF")
# Convert StartDate and EndDate to Date objects
Q1_PI_NSF$StartDate <- as.Date(Q1_PI_NSF$StartDate, format = "%m/%d/%Y")
Q1_PI_NSF$EndDate <- as.Date(Q1_PI_NSF$EndDate, format = "%m/%d/%Y")
# Filter out rows with NA values in StartDate or EndDate
Q1_PI_NSF <- Q1_PI_NSF[complete.cases(Q1_PI_NSF$StartDate, Q1_PI_NSF$EndDate), ]
# Determine the minimum and maximum dates for the x-axis
min_date <- min(Q1_PI_NSF$StartDate)
max_date <- max(Q1_PI_NSF$EndDate)
# Extend the x-axis by a certain margin (e.g., 1 year)
extended_min_date <- min_date - lubridate::years(1)
extended_max_date <- max_date + lubridate::years(1)
# Create the Gantt chart with adjusted y-axis labels and amounts
ggplot(Q1_PI_NSF, aes(y = PI, x = StartDate, xend = EndDate)) +
geom_segment(aes(xend = EndDate, y = PI, yend = PI), size = 5, color = "gold") +  # Segment colored by PI
geom_text(aes(x = EndDate, label = Amount), vjust = -0.5, hjust = -0.1, size = 2.5) +  # Add text labels for amounts at the end of bars with reduced size
scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = c(extended_min_date, extended_max_date)) +
labs(title = "Active Awards Timeline by PI",
x = "Timeline",
y = "Principal Investigator") +
theme_minimal() +
theme(legend.position = "none",  # Remove the legend
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 6))  # Reduce the size of y-axis label
# COMPARISON BETWEEEN DOE - Grant Duration
library(readxl)
DOE_Compare_Data <- read_xlsx("DOEawards_Combined_Data.xlsx")
library(dplyr)
# Assuming 'start_date' and 'end_date' are columns containing the start and end dates of the grants,
# and 'institution' is a column indicating the institution for each grant
# Filter the data for each institution
UI_data <- DOE_Compare_Data %>%
filter(Institution == "Regents of the University of Idaho")
BSU_data <- DOE_Compare_Data %>%
filter(Institution == "Boise State University")
ISU_data <- DOE_Compare_Data %>%
filter(Institution == "Idaho State University")
# Calculate the duration of grants for each institution
# Convert "Start Date" and "End Date" columns to date objects
UI_data <- UI_data %>%
mutate(`Start Date` = as.Date(`Start Date`, format = "%m/%d/%Y"),
`End Date` = as.Date(`End Date`, format = "%m/%d/%Y"))
# Assuming 'grant_duration' is in days
UI_data <- UI_data %>%
mutate(grant_duration = `End Date` - `Start Date`)
UI_data <- UI_data %>%
mutate(grant_duration_years = as.numeric(grant_duration) / 365.25)
# BSU
BSU_data <- BSU_data %>%
mutate(`Start Date` = as.Date(`Start Date`, format = "%m/%d/%Y"),
`End Date` = as.Date(`End Date`, format = "%m/%d/%Y"))
# Assuming 'grant_duration' is in days
BSU_data <- BSU_data %>%
mutate(grant_duration = `End Date` - `Start Date`)
BSU_data <- BSU_data %>%
mutate(grant_duration_years = as.numeric(grant_duration) / 365.25)
# ISU
ISU_data <- ISU_data %>%
mutate(`Start Date` = as.Date(`Start Date`, format = "%m/%d/%Y"),
`End Date` = as.Date(`End Date`, format = "%m/%d/%Y"))
# Assuming 'grant_duration' is in days
ISU_data <- ISU_data %>%
mutate(grant_duration = `End Date` - `Start Date`)
ISU_data <- ISU_data %>%
mutate(grant_duration_years = as.numeric(grant_duration) / 365.25)
# Visualization
library(dplyr)
# Assuming UI_data contains the grant duration information for one institution
# and other_datasets contain the grant duration information for the other institutions
# Combine datasets
combined_data <- bind_rows(UI_data, BSU_data, ISU_data)
# Colors
my_colors <- c("Boise State University" = "orange", "Idaho State University" = "black", "Regents of the University of Idaho" = "gold")
# Plotting grant duration as a bar graph
# Plotting grant duration as a bar graph
library(ggplot2)
ggplot(combined_data, aes(x = Institution, y = grant_duration_years)) +
geom_bar(stat = "identity", position = "dodge", fill = c(my_colors[combined_data$Institution])) +
ggtitle("Grant Duration by Institution") +
xlab("") +
ylab("Grant Duration (Years)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 14))
# Read the Excel file
DOEawardsUI_Dates <- read_xlsx("DOEawards.xlsx")
filtered_data_UI_DOE <- DOEawardsUI_Dates %>%
filter(Institution == 'Regents of the University of Idaho')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
filtered_data_UI_10y_DOE <- filtered_data_UI_DOE %>%
filter(`Start Date` >= ten_years_ago)
#USDA
# Read the Excel file
USDAawardsUI_Dates <- read_xlsx("USDAtoUI_Edited_YR.xlsx")
filtered_data_UI_USDA <- USDAawardsUI_Dates %>%
filter(Institution == 'University of Idaho')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
filtered_data_UI_10y_USDA <- filtered_data_UI_USDA %>%
filter(`Award Date` >= ten_years_ago)
#NIH
# Read the Excel file
NIHawardsUI_Dates <- read_xlsx("UI_NIH_ALL_YR.xlsx")
filtered_data_UI_NIH <- NIHawardsUI_Dates %>%
filter(Institution == 'UNIVERSITY OF IDAHO')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
# Assuming the date format is Month/Day/Year
filtered_data_UI_10y_NIH <- filtered_data_UI_NIH %>%
filter(as.Date(`Project Start Date`, format = "%m/%d/%Y") >= ten_years_ago)
#NSF
# Read the Excel file
NSFawardsUI_Dates <- read_xlsx("NSF_ALL_YR.xlsx")
filtered_data_UI_NSF <- NSFawardsUI_Dates %>%
filter(Institution == 'University of Idaho')
# Assuming the start date column is named "Start_Date"
ten_years_ago <- Sys.Date() - years(10)  #
# Filter the data to include only awards that
# Assuming the date format is Month/Day/Year
filtered_data_UI_10y_NSF <- filtered_data_UI_NSF %>%
filter(as.Date(StartDate, format = "%m/%d/%Y") >= ten_years_ago)
# Remove dollar signs ($) and commas (,) from numeric columns
filtered_data_UI_10y_NSF <- filtered_data_UI_10y_NSF %>%
mutate(AwardedAmountToDate = as.numeric(gsub("[\\$,]", "", AwardedAmountToDate)))
# Sum the total amount by start date for each sponsor
amount_sum_DOE <- filtered_data_UI_10y_DOE %>%
group_by(`Start Date`) %>%
summarize(Total_Amount = sum(`Amount Awarded to Date`))
amount_sum_USDA <- filtered_data_UI_10y_USDA %>%
group_by(`Award Date`) %>%
summarize(Total_Amount = sum(`Award Dollars`))
amount_sum_NIH <- filtered_data_UI_10y_NIH %>%
group_by(`Project Start Date`) %>%
summarize(Total_Amount = sum(`Total Cost`))
amount_sum_NSF <- filtered_data_UI_10y_NSF %>%
group_by(StartDate) %>%
summarize(Total_Amount = sum(AwardedAmountToDate))
# Add Sponsor column to each data frame
amount_sum_DOE <- amount_sum_DOE %>% mutate(Sponsor = "DOE")
amount_sum_USDA <- amount_sum_USDA %>% mutate(Sponsor = "USDA")
amount_sum_NIH <- amount_sum_NIH %>% mutate(Sponsor = "NIH")
amount_sum_NSF <- amount_sum_NSF %>% mutate(Sponsor = "NSF")
# For DOE dataset
amount_sum_DOE <- amount_sum_DOE %>%
rename(Start_Date = `Start Date`) %>%
mutate(Sponsor = "DOE")
# For USDA dataset
amount_sum_USDA <- amount_sum_USDA %>%
rename(Start_Date = `Award Date`) %>%
mutate(Sponsor = "USDA")
# For NIH dataset
amount_sum_NIH <- amount_sum_NIH  %>%
rename(Start_Date = `Project Start Date`) %>%
mutate(Sponsor = "NIH")
# For NSF dataset
amount_sum_NSF <- amount_sum_NSF %>%
rename(Start_Date = StartDate) %>%
mutate(Sponsor = "NSF")
# Assuming Start_Date is in character format, convert it to datetime
amount_sum_DOE <- amount_sum_DOE %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
amount_sum_USDA <- amount_sum_USDA %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
amount_sum_NIH <- amount_sum_NIH %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
amount_sum_NSF <- amount_sum_NSF %>%
mutate(Start_Date = as.Date(Start_Date, format = "%m/%d/%Y"))
# Combine the data frames
all_amount_sum <- bind_rows(
amount_sum_DOE %>% mutate(Sponsor = "DOE"),
amount_sum_USDA %>% mutate(Sponsor = "USDA"),
amount_sum_NIH %>% mutate(Sponsor = "NIH"),
amount_sum_NSF %>% mutate(Sponsor = "NSF")
)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
library(scales)
# Plot the timeline with overlapping lines, adjusted x-axis labels, individual colors, and centralized title
ggplot(all_amount_sum, aes(x = Start_Date, y = Total_Amount / 1e6, color = Sponsor, group = Sponsor)) +
geom_line(size = 1) +
labs(title = "Awards Timeline by Sponsor - Total Amount",
x = "Start Date",
y = "Total Amount (Millions)") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y", expand = c(0, 0)) +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
scale_color_manual(values = sponsor_colors) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Convert Amount to numeric
Q1_Data$Amount <- as.numeric(Q1_Data$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black")
# Create the bar plot with PI on the x-axis and filled bars by Sponsor
ggplot(Q1_Data, aes(x = PI, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by PI and Sponsor",
x = "Principal Investigator",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  # Adjust font size
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Convert Amount to numeric
Q1_Data_Amount$Amount <- as.numeric(Q1_Data_Amount$Amount)
# Check if there are any non-numeric values in Amount
non_numeric <- Q1_Data_Amount[!is.na(as.numeric(Q1_Data_Amount$Amount)), ]
# Check the structure of the Amount variable
str(Q1_Data_Amount$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Convert Amount to numeric
Q1_Data_Amount$Amount <- as.numeric(Q1_Data_Amount$Amount)
# Check if there are any non-numeric values in Amount
non_numeric <- Q1_Data_Amount[!is.na(as.numeric(Q1_Data_Amount$Amount)), ]
# Check the structure of the Amount variable
str(Q1_Data_Amount$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
View(Q1_Data_Amount)
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Convert Amount to numeric
Q1_Data_Amount$Amount <- as.numeric(Q1_Data_Amount$Amount)
# Check if there are any non-numeric values in Amount
non_numeric <- Q1_Data_Amount[!is.na(as.numeric(Q1_Data_Amount$Amount)), ]
# Check the structure of the Amount variable
str(Q1_Data_Amount$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
library(readxl)
Q1_Compilled_Data_4 <- read_excel("posts/MidtermPortfolioPost/Q1_Compilled_Data_4.xlsx")
View(Q1_Compilled_Data_4)
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
## Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", "", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
View(Q1_Data_Amount_2)
# Remove rows with NA values in the Amount column
Q1_Data_Amount_2 <- Q1_Data_Amount_2[!is.na(Q1_Data_Amount_2$Amount), ]
# Check if there are any remaining NA values
any(is.na(Q1_Data_Amount_2$Amount))
View(Q1_Data_Amount_2)
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", "", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
View(Q1_Data_Amount_2)
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", ",", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
View(Q1_Data_Amount_2)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
View(Q1_Data_Amount_2)
# Create a bar graph with the Original_Amount column
ggplot(Q1_Data_Amount_2, aes(x = Your_X_Variable, y = Original_Amount)) +
geom_bar(stat = "identity") +
labs(title = "Your Title",
x = "Your X Label",
y = "Your Y Label")
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", ",", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Create a bar graph with the Original_Amount column
ggplot(Q1_Data_Amount_2, aes(x = Your_X_Variable, y = Original_Amount)) +
geom_bar(stat = "identity") +
labs(title = "Your Title",
x = "Your X Label",
y = "Your Y Label")
library(ggplot2)
library(scales)  # For formatting labels
# Read the data
Q1_Data_Amount_2 <- read_xlsx("Q1_Compilled_Data_4.xlsx")
# Make a copy of the Amount column
Q1_Data_Amount_2$Original_Amount <- Q1_Data_Amount_2$Amount
# Remove dollar signs from the Amount column
Q1_Data_Amount_2$Amount <- gsub("\\$", ",", Q1_Data_Amount_2$Amount)
# Convert the Amount column to numeric
Q1_Data_Amount_2$Amount <- as.numeric(Q1_Data_Amount_2$Amount)
# Check for NA values in the Amount column
any(is.na(Q1_Data_Amount_2$Amount))
# Check the structure of the Amount variable
str(Q1_Data_Amount_2$Amount)
# Define colors for each sponsor
sponsor_colors <- c("DOE" = "darkgray", "NSF" = "gold", "NIH" = "black", "USDA" = "lightgray")
# Create the bar plot with colors assigned to each sponsor
ggplot(Q1_Data_Amount, aes(x = Sponsor, y = Amount, fill = Sponsor)) +
geom_bar(stat = "summary", fun = "sum") +
labs(title = "Total Amount by Sponsor",
x = "Sponsor",
y = "Total Amount (Millions)") +
scale_y_continuous(labels = scales::unit_format(unit = "M")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)) +  # Adjust title alignment
scale_fill_manual(values = sponsor_colors)  # Use manually defined colors for each sponsor
graph4 = ({
nodes: [
