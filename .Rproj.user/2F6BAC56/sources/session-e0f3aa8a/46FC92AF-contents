---
title: "BCB 520 - FINAL PROJECT"
subtitle: "Let's get into Rainfall Data of Puerto Rico"
format:
  html:
    toc: false
    echo: true
author: "Geraline Tross-Torres"
date: "2024-05-03"
categories: [Portfolio, DataViz, Assignment]
image: "RainFall.png"
description: "How much Rainfall did Puerto Rico had in the last 15 years"
code-fold: true
code-tools: true
execute: 
  warning: False

---

## Preamble

Let's learn more about the rain patterns across Puerto Rico. Over the years, we had different patterns of rain, which depend on the season; for example, during hurricane and tropical seasons, we will have more rainfall than in years when there are no storms, and we can also see when we have drought season. 

How can we get this information? The NOAA has stations across the island that measure the amount of rain accumulated around each station. We can display that data on a spatial map and visualize the amount of rain accumulated between stations.

In this post, we look at 15 years of rainfall data. I will provide details on how I got to my final finished map visualization and what information we can obtain from it.

## Data

```{r, include=FALSE}
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
library (knitr)
library(plotly)
library(maps)
library(tidyverse)
```

The rain data was acquired by the database of the **National Centers for Environmental Information - National Oceanic and Atmospheric Administration (NCEI - NOAA)**. https://www.ncei.noaa.gov/access/search/data-search/daily-summaries

The NCEI-NOAA provides large data sets of integrated daily climate observations through time, such as rain, snow, hail, temperature, etc. The data set that I am working on is how much rain we had in different years in Puerto Rico. The following **Data Table** provides the data I used to visualize my map. I also provided a **Data Dictionary** to help you interpret the Data Table. 

### Data Dictionary

```{r}
DataDic <- read_xlsx("data dic.xlsx")
# Assuming you want to select only the first 10 columns from DataTable

# Displaying the selected columns using knitr::kable()
knitr::kable(head(DataDic))
```

### Data Table

```{r}
DataTable <- read_xlsx("geraline_data_mm.xlsx")
# Assuming you want to select only the first 10 columns from DataTable
selected_columns <- DataTable[, 1:10]

# Displaying the selected columns using knitr::kable()
knitr::kable(head(selected_columns))

```

```{r}
library(dplyr)

# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))
```

## Visualizations

The following visualizations show how I incorporated the rainfall data into a ggplot and Plotly to make the map interactive. 

### Base Map of Puerto Rico

This is just a base map of Puerto Rico. I was searching for a simple map that would help me incorporate the different NOAA stations so that I could later add the actual rainfall data. 

```{r}
# Get the spatial data for countries
countries <- ne_countries(scale = "medium", returnclass = "sf")

# Filter the dataset to extract Puerto Rico
puerto_rico <- subset(countries, admin == "Puerto Rico")

# Plot Puerto Rico's geometry
ggplot() +
  geom_sf(data = puerto_rico) +
  theme_void()
```

**Figure 1:** Base Map of Puerto Rico. This is just a plot of Puerto Rico's geometry of how the island looks like

### Can you see Puerto Rico?

I mentioned before that I wanted to use Plotly to have an interactive map; basically, I wanted to hover over the stations, and their names would come up and zoom in and out, but it was more complex than I thought.

First, I couldn't get an interactive map with just Puerto Rico. I had to find another projection and add the latitude and longitude coordinates so the map could be centered on Puerto Rico. However, I used the **Mercator projection**, and it was hard to see Puerto Rico.

**Can you zoom in and see where Puerto Rico is?**

Once you are zoomed in, you can see Puerto Rico and the 26 NOAA stations. You can hover over them to see their names. I added the stations to the map due to their latitude and longitude coordinates.

**Is the quality of the visualization good?**

So, I have Puerto Rico and its stations, but there are too many steps just to get to the map, and the quality of the map is not good, so I had to take another approach.

```{r}
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

stations <- rainfallprwide %>%
  select(STATION, LATITUDE, LONGITUDE, NAME)%>%
  unique()

g <- list(
  scope = 'north america',
  center = list(lat = 18.2208, lon = -66.5901),  # Centered on Puerto Rico
  projection = list(type = 'mercator'),
  showland = TRUE,
  landcolor = "rgb(220, 220, 220)",  # Light gray
  subunitcolor = "rgb(200, 200, 200)",  # Light gray
  countrycolor = "rgb(200, 200, 200)",  # Light gray
  countrywidth = 0.5,
  subunitwidth = 0.5
)

 plot_geo(stations, lat = ~LATITUDE, lon = ~LONGITUDE) %>%
  add_markers(
    text = ~NAME,
    symbol = I("circle"),
    size = I(10),
    hoverinfo = "text"
  ) %>%
  layout(
    title = 'NOAA Stations - Puerto Rico',
    geo = g
  )

```

**Figure 2:** Plotly Interaction Map of Puerto Rico. Zooming into Puerto Rico, there are 26 NOAA stations, and you can hover over them to see their names. I added the stations to the map due to their latitude and longitude coordinates.

### Combination of ggplot Base Map + Plotly

```{r}
# Get the map data for Puerto Rico
map_data <- map_data("world", region = "Puerto Rico")

# Create the base map with ggplot2
base_map <- ggplot() +
  geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
  coord_map() +
  ggtitle("NOAA Stations - Puerto Rico") +
  theme(plot.title = element_text(hjust = 0.5),  # Centering title
        axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
        axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', and 'NAME'
# Add station markers to the Plotly map
 plotly_map %>%
  add_markers(
    data = stations,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",  # Change the symbol to square
      color = "navy",     # Change the color to blue
      size = 10           # Change the size to 10
    ),
    hoverinfo = "text"
  ) 
```

### Applying Rainfall Data of January 2009

```{r}
#2009
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
  filter(MONTH == 1) %>%
  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
  unique()

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

base_map_2 <- ggplot() +
  geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
  coord_map() +
  ggtitle("Rainfall for January 2009") +
  theme(plot.title = element_text(hjust = 0.5),  # Centering title
        axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
        axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label


# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map_2)

# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
 plotly_map %>%
  add_markers(
    data = station_year_total_rainfall,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",       # Change the symbol to square
      color = ~Total_Rainfall_2009 / 100,          # Change the color to blue
      size = ~Total_Rainfall_2009 / 100,
      colorscale = "Blues",
      reversescale = TRUE              # Size based on rainfall in 2009
    ),
    hoverinfo = "text"
  ) 
```

### 15 years of Rainfall in Puerto Rico

```{r}
base_map_3 <- ggplot() +
  geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
  coord_map() +
  ggtitle("15 Years of RainFall in Puerto Rico") +
  theme(plot.title = element_text(hjust = 0.5),  # Centering title
        axis.title.x = element_text(size = 12, face = "bold", color = "black"),  # Customizing x-axis label
        axis.title.y = element_text(size = 12, face = "bold", color = "black"))  # Customizing y-axis label

# Create an empty list to store the plots
plot_list <- list()

# Loop over each year
for (year in 2009:2023) {
  # Create a map for the current year
  plot <- ggplotly(base_map_3) %>%
    add_markers(
      data = station_year_total_rainfall,
      x = ~LONGITUDE,
      y = ~LATITUDE,
      text = ~NAME,
      marker = list(
        symbol = "circle",
        color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
        size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
        colorscale = "Blues",
        reversescale = TRUE
      ),
      hoverinfo = "text"
    )
  
  # Add the plot to the list
  plot_list[[year - 2008]] <- plot
}

# Arrange the plots in a grid
subplot(plot_list, nrows = 5)


```

### Conclusions or Summary
