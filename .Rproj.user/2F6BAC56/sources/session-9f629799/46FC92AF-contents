---
title: "BCB 520 - FINAL PROJECT"
subtitle: "Let's get into RainFall Data in Puerto Rico"
format:
  html:
    toc: false
    echo: true
author: "Geraline Tross-Torres"
date: "2024-04-28"
categories: [Portfolio, DataViz, Assignment]
image: "RainFall.png"
description: "How much Rainfall did Puerto Rico had in the last 15 years"
code-fold: true
code-tools: true

---

## OVERVIEW

This assignment provides you the opportunity to synthesize all of the concepts we've covered in the course to date. The basic framework is that you will create a COMPLETE data visualization BLOG post that is suitable as a showcase component of your Data Science Portfolio. The point is to [SHOW]{.red} people your skills.

## STRUCTURE

The basic formatting guidelines for this assignment are:

1.  Include `code fold` or `code tools` options (or both) that allow users to view and copy your code while maintaining overall readability of your post.
2.  Suppress all output and warnings that might distract from your visualizations and writing.
3.  Properly title your assignment. The main title should be **"BCB 520 - Final Project"**, and the subtitle should be a descriptive title related to your question or topic.
4.  Include author, date, categories, and a description in your YAML header.
5.  Write clear, complete sentences for a target audience with some scientific background but little training in your specific discipline.
6.  Include references if appropriate and use hyperlinks to external sources of data, inspiration, or examples.
7.  Use the header hierarchy and create a sensible document outline with white space. Format for readability! Use **bold** and *italic* fonts to emphasize things! Use [color]{.red} by customizing your `.css` file!

**In addition to the above formatting guidelines, your portfolio post must contain the following sections:**

### Preamble

Write a brief paragraph describing the primary question or purpose of the post. Ideally, the concept should be challenging enough that it requires at least two visualizations that use different idioms (ie. don't just make two scatterplots with different variables). The concept should also be challenging enough that it captures the interest of the reader (i.e. a plot of height and weight that shows they are correlated is trivial and not appropriate). The best approach is to explore a topic or question in which YOU are very interested.

### Data

```{r}
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
library(rnaturalearthhires)
library(plotly)
library(readxl)
library(dplyr)
```

Write a summary of the data sources you will use. Include a `Data Dictionary` table that fully describes each individual data file used. You may use your own research data or publicly available data from any source you like (with attribution). There aren't any minimum or maximum data set size requirements, other than you need something big enough to be interesting and not so big that we don't have a supercomputer capable of creating your visualization.

**NEW REQUIREMENT: Your assignment must feature one of the two new data types we have considered since the midterm: NETWORK DATA or SPATIAL DATA.**

### Visualizations

Create your visualizations and include text that explains any steps or design choices. Be sure to include clearly labeled axes and a concise but complete figure caption for each visualization. Make deliberate choices for color palettes, point marks, line types, etc. Demonstrate that you understand the concepts we have covered!

```{r}
# Get the spatial data for countries
countries <- ne_countries(scale = "medium", returnclass = "sf")

# Filter the dataset to extract Puerto Rico
puerto_rico <- subset(countries, admin == "Puerto Rico")

# Plot Puerto Rico's geometry
ggplot() +
  geom_sf(data = puerto_rico) +
  theme_void()
```

```{r}
library(tidyverse)
library(readxl)
library(viridis)
library (plotly)

# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

stations <- rainfallprwide %>%
  select(STATION, LATITUDE, LONGITUDE, NAME)%>%
  unique()

g <- list(
  scope = 'north america',
  center = list(lat = 18.2208, lon = -66.5901),  # Centered on Puerto Rico
  projection = list(type = 'mercator'),
  showland = TRUE,
  landcolor = "rgb(220, 220, 220)",  # Light gray
  subunitcolor = "rgb(200, 200, 200)",  # Light gray
  countrycolor = "rgb(200, 200, 200)",  # Light gray
  countrywidth = 0.5,
  subunitwidth = 0.5
)

 plot_geo(stations, lat = ~LATITUDE, lon = ~LONGITUDE) %>%
  add_markers(
    text = ~NAME,
    symbol = I("circle"),
    size = I(10),
    hoverinfo = "text"
  ) %>%
  layout(
    title = 'Rainfall in Puerto Rico Stations',
    geo = g
  )

```

```{r}
library(plotly)
library(ggplot2)
library(maps)

# Get the map data for Puerto Rico
map_data <- map_data("world", region = "Puerto Rico")

# Create the base map with ggplot2
base_map <- ggplot() +
  geom_polygon(data = map_data, aes(x = long, y = lat, group = group), fill = "lightgray", color = "black") +
  coord_map() +
  ggtitle("Map of Puerto Rico")

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', and 'NAME'
# Add station markers to the Plotly map
 plotly_map %>%
  add_markers(
    data = stations,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",  # Change the symbol to square
      color = "navy",     # Change the color to blue
      size = 10           # Change the size to 10
    ),
    hoverinfo = "text"
  ) 


```

```{r}
library(tidyverse)
library(readxl)

#2009
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
  filter(MONTH == 1) %>%
  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
  unique()

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
 plotly_map %>%
  add_markers(
    data = station_year_total_rainfall,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",       # Change the symbol to square
      color = ~Total_Rainfall_2009 / 100,          # Change the color to blue
      size = ~Total_Rainfall_2009 / 100,
      colorscale = "Blues",
      reversescale = TRUE              # Size based on rainfall in 2009
    ),
    hoverinfo = "text"
  ) 
```

```{r}
#2012
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
  filter(MONTH == 1) %>%
  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2012") %>%
  unique()

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
 plotly_map %>%
  add_markers(
    data = station_year_total_rainfall,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",       # Change the symbol to square
      color = ~Total_Rainfall_2012 / 100,          # Change the color to blue
      size = ~Total_Rainfall_2012 / 100,
      colorscale = "Blues",
      reversescale = TRUE              # Size based on rainfall in 2009
    ),
    hoverinfo = "text"
  )

```

```{r}
#2017
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
  filter(MONTH == 1) %>%
  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
  unique()

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
 plotly_map %>%
  add_markers(
    data = station_year_total_rainfall,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",       # Change the symbol to square
      color = ~Total_Rainfall_2017 / 100,          # Change the color to blue
      size = ~Total_Rainfall_2017 / 100,
      colorscale = "Blues",
      reversescale = TRUE              # Size based on rainfall in 2009
    ),
    hoverinfo = "text"
  )
```

```{r}
#2019
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
  filter(MONTH == 1) %>%
  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
  unique()

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
 plotly_map %>%
  add_markers(
    data = station_year_total_rainfall,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",       # Change the symbol to square
      color = ~Total_Rainfall_2019 / 100,          # Change the color to blue
      size = ~Total_Rainfall_2019 / 100,
      colorscale = "Blues",
      reversescale = TRUE              # Size based on rainfall in 2009
    ),
    hoverinfo = "text"
  )

```



```{r}
#2022
# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Create the stations data frame and filter for month 1
stations_rain <- rainfallprwide %>%
  filter(MONTH == 1) %>%
  select(STATION, LATITUDE, LONGITUDE, NAME, MONTH, "2009") %>%
  unique()

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

# Convert the base map to a Plotly object
plotly_map <- ggplotly(base_map)

# Assuming 'stations_rain' is your data frame and it has columns 'LATITUDE', 'LONGITUDE', 'NAME', and '2009'
# Add station markers to the Plotly map with size based on rainfall in 2009
 plotly_map %>%
  add_markers(
    data = station_year_total_rainfall,
    x = ~LONGITUDE,
    y = ~LATITUDE,
    text = ~NAME,
    marker = list(
      symbol = "circle",       # Change the symbol to square
      color = ~Total_Rainfall_2022 / 100,          # Change the color to blue
      size = ~Total_Rainfall_2022 / 100,
      colorscale = "Blues",
      reversescale = TRUE              # Size based on rainfall in 2009
    ),
    hoverinfo = "text"
  )
```

```{r}
library(dplyr)

# Read the data
rainfallprwide <- read_excel('geraline_data_mm.xlsx')

# Extract years from column names
years <- as.character(2009:2023)

# Convert the numeric columns to numeric type
rainfallprwide[,-(1:5)] <- lapply(rainfallprwide[,-(1:5)], as.numeric)

# Calculate total rainfall for each station for each year individually
station_year_total_rainfall <- rainfallprwide %>%
  group_by(STATION, LATITUDE, LONGITUDE, NAME) %>%
  summarise(across(all_of(years), ~sum(.x, na.rm = TRUE), .names = "Total_Rainfall_{.col}"))

```

```{r}
library(plotly)

# Create an empty list to store the plots
plot_list <- list()

# Loop over each year
for (year in 2009:2023) {
  # Create a map for the current year
  plot <- ggplotly(base_map) %>%
    add_markers(
      data = station_year_total_rainfall,
      x = ~LONGITUDE,
      y = ~LATITUDE,
      text = ~NAME,
      marker = list(
        symbol = "circle",
        color = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
        size = station_year_total_rainfall[[paste0("Total_Rainfall_", year)]] / 100,
        colorscale = "Blues",
        reversescale = TRUE
      ),
      hoverinfo = "text"
    )
  
  # Add the plot to the list
  plot_list[[year - 2008]] <- plot
}

# Arrange the plots in a grid
subplot(plot_list, nrows = 5)

```

### Conclusions or Summary

Answer your research question. Draw a conclusion or inference related to your topic. Summarize your results. What new questions have emerged as a result of your visualizations? What interesting next steps have emerged?