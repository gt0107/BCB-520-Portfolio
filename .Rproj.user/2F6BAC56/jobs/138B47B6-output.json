[1,"==> quarto preview --render all --no-watch-inputs --no-browse\n\n"]
[1,"Rendering:\n"]
[1,"\r[1/8] posts\\welcome\\index.qmd\n"]
[1,"\r[2/8] posts\\MarksChannels\\Asig4_2.qmd\n"]
[1,"\r[3/8] posts\\VisualizationTabularDataPart2\\Asig5_2.qmd\n"]
[1,"WARNING: Unable to resolve link target: posts\\T6-APIsandJSON\\index.qmd\n"]
[1,"\r[4/8] posts\\MidtermPortfolioPost\\Midterm_3.qmd\n"]
[1,"WARNING: Warning: diff of engine output timed out. No source lines will be available.\n"]
[1,"\r[5/8] posts\\NetworkData\\index.qmd\n"]
[1,"\r[6/8] posts\\NetworkObservable\\index.qmd\n"]
[1,"ERROR: OJS parsing failed on line 138, column 1\nSyntaxError: Unexpected token\n----- OJS Source:\n{\n  const form = html`<form style=\"font: 12px var(--sans-serif); display: flex; height: 33px; align-items: center;\">\n    <label style=\"margin-right: 1em; display: inline-flex; align-items: center;\">\n      <input type=\"radio\" name=\"radio\" value=\"1\" style=\"margin-right: 0.5em;\" checked> Graph 1\n    </label>\n    <label style=\"margin-right: 1em; display: inline-flex; align-items: center;\">\n      <input type=\"radio\" name=\"radio\" value=\"2\" style=\"margin-right: 0.5em;\"> Graph 2\n    </label>\n    <label style=\"margin-right: 1em; display: inline-flex; align-items: center;\">\n      <input type=\"radio\" name=\"radio\" value=\"3\" style=\"margin-right: 0.5em;\"> Graph 3\n    </label>\n  </form>`;\n  const graphs = {1: graph1, 2: graph2, 3: graph3};\n  let timeout; // Define timeout variable\n  const chart = chart3(); // Initialize the chart component\n  form.onchange = () => {\n    chart.update(graphs[form.radio.value]); // Update the chart when form selection changes\n  };\n  form.value = graphs[form.radio.value]; // Set initial value\n  form.dispatchEvent(new CustomEvent(\"input\")); // Trigger input event\n  invalidation.then(() => clearInterval(timeout));\n  return form;\n}\nconst chart3 = () => { // Define chart3 only once\n^\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n  const simulation = d3.forceSimulation()\n      .force(\"charge\", d3.forceManyBody().strength(-1000))\n      .force(\"link\", d3.forceLink().id(d => d.id).distance(200))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n  let link = svg.append(\"g\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"line\");\n  let node = svg.append(\"g\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"circle\");\n  function ticked() {\n    node.attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y)\n    link.attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n  }\n  // Terminate the force layout when this cell re-runs.\n  invalidation.then(() => simulation.stop());\n  return Object.assign(svg.node(), {\n    update({nodes, links}) {\n      // Make a shallow copy to protect against mutation, while\n      // recycling old nodes to preserve position and velocity.\n      const old = new Map(node.data().map(d => [d.id, d]));\n      nodes = nodes.map(d => Object.assign(old.get(d.id) || {}, d));\n      links = links.map(d => Object.assign({}, d));\n      simulation.nodes(nodes);\n      simulation.force(\"link\").links(links);\n      simulation.alpha(1).restart();\n      node = node\n        .data(nodes, d => d.id)\n        .join(enter => enter.append(\"circle\")\n          .attr(\"r\", 8)\n          .attr(\"fill\", d => color(d.id)));\n      link = link\n        .data(links, d => `${d.source.id}\\t${d.target.id}`)\n        .join(\"line\");\n    }\n  });\n};\n// Define timeout to periodically update the visualization\nconst interval = 2000; // Update every 2000 milliseconds (2 seconds)\ntimeout = setInterval(() => {\n    chart.update(graphs[form.radio.value]); // Update the chart with the current graph data\n}, interval);\n-----\n"]
[1,"\r[7/8] about.qmd\n"]
[1,"\r[8/8] Index.qmd\n"]
[1,"\n"]
[1,"Watching files for changes\nBrowse at http://localhost:6433/Index.html\n"]
[1,"GET: /\n"]
[1,"  /customstyles.css (404: Not Found)\n"]
